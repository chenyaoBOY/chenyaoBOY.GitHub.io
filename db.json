{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/page/background.webp","path":"images/page/background.webp","modified":0,"renderable":0},{"_id":"source/images/page/jiyuanmei.jpeg","path":"images/page/jiyuanmei.jpeg","modified":0,"renderable":0},{"_id":"source/images/page/santi.jpeg","path":"images/page/santi.jpeg","modified":0,"renderable":0},{"_id":"source/images/page/wechat.jpg","path":"images/page/wechat.jpg","modified":0,"renderable":0},{"_id":"source/images/sql/sql-limit.png","path":"images/sql/sql-limit.png","modified":0,"renderable":0},{"_id":"source/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg","path":"images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img.png","path":"images/jiagousheji/img.png","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img_1.png","path":"images/jiagousheji/img_1.png","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img_2.png","path":"images/jiagousheji/img_2.png","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img_4.png","path":"images/jiagousheji/img_4.png","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img_5.png","path":"images/jiagousheji/img_5.png","modified":0,"renderable":0},{"_id":"source/images/jiagousheji/img_3.png","path":"images/jiagousheji/img_3.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/menu.yml","hash":"c37664eeeb90a1a1d6042e423ccae431fe040164","modified":1657613563590},{"_id":"source/_posts/hexo-butterfly-文章美化语法收录.md","hash":"f4affe8be57baa156446aca3c7efb98935c39760","modified":1657867690190},{"_id":"source/_data/link.yml","hash":"a4e829db6336a77a68c1d0cbc14ae267d1195e10","modified":1657716436147},{"_id":"source/_posts/mybatis动态数据源.md","hash":"fce7572a777fe22620b597efc1756317a5d337eb","modified":1658221786952},{"_id":"source/_posts/技术链接.md","hash":"7d937270835d54777f806f2de072293e9a09c0a0","modified":1658231792125},{"_id":"source/_posts/夏日纪实.md","hash":"ee179c9d0323eb3b9b1adc0e7719b6523cc3fc43","modified":1658108813430},{"_id":"source/_posts/慢SQL踩坑记录——limit分页不走索引.md","hash":"1ed29c06942fb912f2dff50e43c48b7cecdc42a7","modified":1658108813435},{"_id":"source/messageboard/index.md","hash":"e50301f4f2249a2c5cf2380bd5da1a2ece1e04b1","modified":1657784184885},{"_id":"source/categories/index.md","hash":"94989c3baf5032d98ccb1017f15f8477a22010ca","modified":1657784049249},{"_id":"source/_posts/系统拆分方法论.md","hash":"c9e4ba24a2bce8e95a91624b4af8a0b18612c3e7","modified":1658143625288},{"_id":"source/link/index.md","hash":"b218b034def55162636a7c47beb22741f15d748b","modified":1657615490977},{"_id":"source/tags/index.md","hash":"720026ca05f0285148cbc1d623bafed151fd13e2","modified":1657784049252},{"_id":"source/_drafts/readme.md","hash":"aaf3f702501f198b364184aba22e69543bb6497e","modified":1657680292370},{"_id":"source/images/sql/sql-limit.png","hash":"c064f0cbceee9f632e5f1dbc3d74be45ea69f305","modified":1657868427846},{"_id":"source/images/page/wechat.jpg","hash":"28570701bb6736beb48e720a9b2a24a65537b734","modified":1657621338393},{"_id":"source/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg","hash":"9de557ebc5cdc539844638d906131c993cca460e","modified":1657871373980},{"_id":"source/images/page/background.webp","hash":"0988570c032515ed77325f0857e16f666cff7684","modified":1657626762196},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1657614867614},{"_id":"themes/butterfly/_config.yml","hash":"26a7fa8c79b3732318e751875aff79975abe3775","modified":1657620399945},{"_id":"themes/butterfly/README.md","hash":"cde88743f77bad1b463aa78049398b19f878090e","modified":1657614867614},{"_id":"themes/butterfly/README_CN.md","hash":"01b4feffb432293223f540921ce2cde748b2d2fe","modified":1657614867614},{"_id":"themes/butterfly/plugins.yml","hash":"0194c4fb88a6be30d983a83ac22072bb4d799c9a","modified":1657614867623},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1657712244056},{"_id":"themes/butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":1657614867614},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1657614867615},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1657614867615},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1657614867615},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1657614867615},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1657614867615},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":1657614867614},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1657614867623},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1657614867623},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1657614867614},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1657614867614},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1657614867615},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1657614867614},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":1657614867615},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1657614867624},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1657614867624},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1657614867619},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1657614867623},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1657614867624},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1657614867624},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"a557280a25f63f4312afad63fc3303ec74165557","modified":1657614867617},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1657614867624},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1657614867618},{"_id":"themes/butterfly/package.json","hash":"3bcb70e12282156703626e238e3719611c34c3b7","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1657614867618},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1657614867624},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1657614867624},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1657614867624},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1657614867624},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1657614867624},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1657614867624},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1657614867624},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1657614867624},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1657614867624},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1657614867625},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1657614867624},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1657614867624},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1657614867625},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1657614867625},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1657614867628},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1657614867628},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1657614867628},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1657614867615},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1657614867629},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1657614867630},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1657614867629},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1657614867615},{"_id":"themes/butterfly/source/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1657614867629},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1657614867628},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1657614867617},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1657614867617},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"de8e618ec03295561c667a49e1c383213b856f6f","modified":1657614867615},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1657614867617},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1657614867617},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"8c2524e843adfce00b16e31ee355f14ce9ffb8ba","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1657614867616},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"0d10532648d0335254f21a3b7d8676cb96ea8eba","modified":1657614867617},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1657614867618},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"6d6474ef186c18d9b4f334e1f735eadd6699effa","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1657614867623},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1657614867625},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1657614867626},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1657614867625},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1657614867625},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1657614867623},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1657614867623},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1657614867626},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":1657614867626},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1657614867627},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1657614867627},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1657614867627},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1657614867627},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1657614867627},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1657614867627},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1657614867627},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1657614867626},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1657614867627},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1657614867627},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1657614867627},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1657614867627},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1657614867627},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1657614867628},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1657614867627},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1657614867628},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1657614867628},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1657614867628},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1657614867628},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1657614867628},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1657614867628},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1657614867628},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1657614867629},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1657614867619},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1657614867628},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"2be601477e1b81eee90a00c14ce5c8761d19a332","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1657614867619},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"190b1cca42c7f73c50f62f07d0751449941bff3f","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"2e26af16d359ba362fa611575d7f547848057c0c","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1657614867620},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1657614867629},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1657614867620},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"f4dc7d02c8192979404ae9e134c5048d3d0a76e2","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"8ca02f97bfa93fff9cce5b8eb8feb234e7beeb98","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1657614867621},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1657614867622},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1657614867625},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1657614867625},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1657614867625},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1657614867622},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1657614867622},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1657614867626},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1657614867626},{"_id":"source/images/page/santi.jpeg","hash":"9ece219a293b9ec68686a32b0bbee4370ce8bd6c","modified":1632641151073},{"_id":"source/images/page/jiyuanmei.jpeg","hash":"ba872922230748186da0004d83a8c571e0cc1015","modified":1631763183859},{"_id":"public/baidu_urls.txt","hash":"3b0ec1582c63ea91c33b2a43c2aef7cd3a4958e2","modified":1660047385191},{"_id":"public/messageboard/index.html","hash":"3b31058074150acf0d59a05ed6208f13d003a224","modified":1660047385191},{"_id":"public/categories/index.html","hash":"8fabf538ad94f6dbb81edf482822105c1c3ef347","modified":1660047385191},{"_id":"public/link/index.html","hash":"3ea62749987a20a0a7880a3f8a28a493eaa76eba","modified":1660047385191},{"_id":"public/tags/index.html","hash":"f989410e67ef54acaf8a09505c3970fecded70f9","modified":1660047385191},{"_id":"public/2022/07/19/mybatis动态数据源/index.html","hash":"22a5c02bf8630a859984df0886d5f6864e5d198a","modified":1660047385191},{"_id":"public/2022/07/18/技术链接/index.html","hash":"bf5d778b41473652371edd8a33bd226789121bc5","modified":1660047385191},{"_id":"public/2022/07/14/慢SQL踩坑记录——limit分页不走索引/index.html","hash":"78a0a174209893f495be0c5cd567585b5e7d2ca6","modified":1660047385191},{"_id":"public/2022/07/14/hexo-butterfly-文章美化语法收录/index.html","hash":"f79a57b9c961190397961f8fb329ad7b449a31cb","modified":1660047385191},{"_id":"public/2022/07/13/系统拆分方法论/index.html","hash":"f8a3545362a6eb43fc5a3939a2e2429a63f042b2","modified":1660047385191},{"_id":"public/2022/07/12/夏日纪实/index.html","hash":"bd6db356e1fdfdff0d113f5f0fe9cbf222e7032e","modified":1660047385191},{"_id":"public/archives/index.html","hash":"4b812b6f7698ebd40b0d1697b931e8751d090d27","modified":1660047385191},{"_id":"public/archives/2022/index.html","hash":"61d89b3c7fea4b180340d8d6ea59bfe98252d038","modified":1660047385191},{"_id":"public/archives/2022/07/index.html","hash":"024f11b342f1e8d83261cfca9b2f503216c5f6eb","modified":1660047385191},{"_id":"public/index.html","hash":"d97d1b6b6f8732ad451bc01f77ae9296623666f4","modified":1660047385191},{"_id":"public/tags/datasource/index.html","hash":"7dac02e374de46627eccb68cd6533f91951e9a39","modified":1660047385191},{"_id":"public/tags/mybatis/index.html","hash":"b5f3a7aff361b1a62754a27b8599c265423f6dfa","modified":1660047385191},{"_id":"public/tags/spring/index.html","hash":"dee14ba886dcc4ca149b32038353e3728e10ae7d","modified":1660047385191},{"_id":"public/tags/读写分离/index.html","hash":"710359cedd7a6eea0536c92cc124c12ff2444c58","modified":1660047385191},{"_id":"public/tags/数据库/index.html","hash":"d88a5c4a344f768b445eeba011061ddfd3ef8c7b","modified":1660047385191},{"_id":"public/tags/拦截器/index.html","hash":"0ead6a0270bcb4cf43bb74cb1172acfb67d58d73","modified":1660047385191},{"_id":"public/tags/过滤器/index.html","hash":"cf7217548dd8f2f1217a9e000cc1bbe7fb834401","modified":1660047385191},{"_id":"public/tags/springboot/index.html","hash":"2c7916e8f60ac8f9ecf3602b2933d8877afd2bd8","modified":1660047385191},{"_id":"public/tags/servlet/index.html","hash":"1045fb5039fbaa431e7506009e6bb3a950c8e09c","modified":1660047385191},{"_id":"public/tags/优雅停机/index.html","hash":"9f7b3d7862cc895d05879eac41d9ad25332f12f7","modified":1660047385191},{"_id":"public/tags/天气/index.html","hash":"c1ab503ebc61d1f807259e267152b022265cf768","modified":1660047385191},{"_id":"public/tags/API使用/index.html","hash":"c325fd7b38852a18b4821f32cf5243f4aa165a1b","modified":1660047385191},{"_id":"public/tags/语法/index.html","hash":"472d9fc09f0a196e3283954253b53628ef769fd6","modified":1660047385191},{"_id":"public/tags/hexo/index.html","hash":"abba391e6fb29374d7b8dfe55d6aea90cafb8853","modified":1660047385191},{"_id":"public/tags/系统拆分/index.html","hash":"82341a04135b9790a7e2d83c855c1527b04a6ad4","modified":1660047385191},{"_id":"public/tags/微服务拆分/index.html","hash":"bb8cb4533f90a9f15ec667db25d5e104c6948724","modified":1660047385191},{"_id":"public/categories/数据源/index.html","hash":"799815a7a31597647f14eb8489a636385832ac47","modified":1660047385191},{"_id":"public/categories/MySQL/index.html","hash":"3dfddd22632a1d42af2978f5ff3ef92e924d7409","modified":1660047385191},{"_id":"public/categories/Java-Springboot/index.html","hash":"a55f6dd54126e5f7e248abce24a2731d16995dcc","modified":1660047385191},{"_id":"public/categories/日记/index.html","hash":"32bce5f113aaf72e7d63d022900e2e2e853778c4","modified":1660047385191},{"_id":"public/categories/教程/index.html","hash":"9e2bbb5abb663a3e8ed1961b860f0dbed7a8383c","modified":1660047385191},{"_id":"public/categories/架构/index.html","hash":"272baca06b93d43743406bcc71e92bde8ec302b6","modified":1660047385191},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1658230955925},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1658230955925},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1658230955925},{"_id":"public/images/sql/sql-limit.png","hash":"c064f0cbceee9f632e5f1dbc3d74be45ea69f305","modified":1658230955925},{"_id":"public/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg","hash":"9de557ebc5cdc539844638d906131c993cca460e","modified":1658230955925},{"_id":"public/images/page/wechat.jpg","hash":"28570701bb6736beb48e720a9b2a24a65537b734","modified":1658230955925},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1658230955925},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1658230955925},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1658230955925},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1658230955925},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1658230955925},{"_id":"public/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1658230955925},{"_id":"public/css/index.css","hash":"509437ddf02fbb886ba2fac8106d701e993b1e4c","modified":1658230955925},{"_id":"public/images/page/background.webp","hash":"0988570c032515ed77325f0857e16f666cff7684","modified":1658230955925},{"_id":"public/images/page/santi.jpeg","hash":"9ece219a293b9ec68686a32b0bbee4370ce8bd6c","modified":1658230955925},{"_id":"public/images/page/jiyuanmei.jpeg","hash":"ba872922230748186da0004d83a8c571e0cc1015","modified":1658230955925},{"_id":"source/_posts/nginx安装使用.md","hash":"92cf42305e9902f69e2aae502199978b9d4f2ab0","modified":1658889780305},{"_id":"source/_drafts/模板.md","hash":"efc5d5680091b33865cde156ef23559c88c79fc6","modified":1658889470965},{"_id":"source/_posts/架构设计.md","hash":"92565fccb3f97d5b8fe29d7ac4b98cea01737d84","modified":1658891471176},{"_id":"source/_posts/jiagousheji/img_3.png","hash":"cd22ba5132ec43a6453900bdad2af1c3b1652025","modified":1658890155523},{"_id":"source/_posts/jiagousheji/img_1.png","hash":"a3b0a3627d2ea64e9432e424f550513140512aef","modified":1658890147540},{"_id":"source/_posts/jiagousheji/img.png","hash":"9570805f0e2002ab0809d32147979336241eb969","modified":1658890119319},{"_id":"source/_posts/jiagousheji/img_2.png","hash":"7cc0b45c37c7c0a389258a6a781a3ff5f3b345b3","modified":1658890151987},{"_id":"source/_posts/jiagousheji/img_4.png","hash":"cbcfc628b9a00dcde4486ecafddf9b35d395b551","modified":1658890161618},{"_id":"source/_posts/jiagousheji/img_5.png","hash":"e4b663a5a283e7332f706b06e1440dfecca83ab4","modified":1658890165094},{"_id":"source/images/jiagousheji/img.png","hash":"9570805f0e2002ab0809d32147979336241eb969","modified":1658890119319},{"_id":"source/images/jiagousheji/img_2.png","hash":"7cc0b45c37c7c0a389258a6a781a3ff5f3b345b3","modified":1658890151987},{"_id":"source/images/jiagousheji/img_1.png","hash":"a3b0a3627d2ea64e9432e424f550513140512aef","modified":1658890147539},{"_id":"source/images/jiagousheji/img_3.png","hash":"cd22ba5132ec43a6453900bdad2af1c3b1652025","modified":1658890155523},{"_id":"source/images/jiagousheji/img_4.png","hash":"cbcfc628b9a00dcde4486ecafddf9b35d395b551","modified":1658890161618},{"_id":"source/images/jiagousheji/img_5.png","hash":"e4b663a5a283e7332f706b06e1440dfecca83ab4","modified":1658890165093},{"_id":"public/2022/07/27/nginx安装使用/index.html","hash":"83a21a0ef5237741093506335722d9eba442d056","modified":1660047385191},{"_id":"public/2022/07/18/架构设计/index.html","hash":"21f3b3ec013d36d377f9a4f852e902a574161155","modified":1660047385191},{"_id":"public/tags/ng/index.html","hash":"b2fb21b52f234d58c9ac9eb8368cf4cd0b915cf7","modified":1660047385191},{"_id":"public/tags/系统设计/index.html","hash":"aeb5bce92526ef7bbb0de6a66d47f756ed2f5f6d","modified":1660047385191},{"_id":"public/images/jiagousheji/img.png","hash":"9570805f0e2002ab0809d32147979336241eb969","modified":1660047385191},{"_id":"public/images/jiagousheji/img_2.png","hash":"7cc0b45c37c7c0a389258a6a781a3ff5f3b345b3","modified":1660047385191},{"_id":"public/images/jiagousheji/img_3.png","hash":"cd22ba5132ec43a6453900bdad2af1c3b1652025","modified":1660047385191},{"_id":"public/images/jiagousheji/img_1.png","hash":"a3b0a3627d2ea64e9432e424f550513140512aef","modified":1660047385191},{"_id":"public/images/jiagousheji/img_4.png","hash":"cbcfc628b9a00dcde4486ecafddf9b35d395b551","modified":1660047385191},{"_id":"public/images/jiagousheji/img_5.png","hash":"e4b663a5a283e7332f706b06e1440dfecca83ab4","modified":1660047385191}],"Category":[{"name":"数据源","_id":"cl5s3wc0w0004ox10as7p1mja"},{"name":"MySQL","_id":"cl5s3wc0y000aox10aftjel5e"},{"name":"Java,Springboot","_id":"cl5s3wc0z000dox10bc6j4yzb"},{"name":"日记","_id":"cl5s3wc0z000gox1021q27e6d"},{"name":"教程","_id":"cl5s3wc110013ox10cretfm59"},{"name":"架构","_id":"cl5s3wc13001dox1053y9dube"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]},{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"title":"不可以涩涩哦","date":"2022-07-14T07:35:57.000Z","_content":"","source":"messageboard/index.md","raw":"---\ntitle: 不可以涩涩哦\ndate: 2022-07-14 15:35:57\n---\n","updated":"2022-07-14T07:36:24.885Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cl5s3wc0t0000ox105s91343y","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":""},{"title":"文章分类","date":"2022-07-12T08:44:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2022-07-12 16:44:16\ntype: \"categories\"\n---\n","updated":"2022-07-14T07:34:09.249Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5s3wc0v0002ox101x8l16pa","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":""},{"title":"link","date":"2022-07-12T08:44:40.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-07-12 16:44:40\ntype: \"link\"\n---\n","updated":"2022-07-12T08:44:50.977Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl5s3wc0x0006ox101wnj7kiy","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":""},{"title":"文章标签","date":"2022-07-12T08:43:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2022-07-12 16:43:38\ntype: \"tags\"\n---\n","updated":"2022-07-14T07:34:09.252Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5s3wc0y0008ox10a35c226v","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":""}],"Post":[{"title":"mybatis动态数据源","_content":"\n## 动态数据源的实现\n\n实现 {% label AbstractRoutingDataSource %} 或者 {% label AbstractDataSource %}\n前者定义好了将数据源存储到Map中以key,value形式存在，后者是父抽象类，可以自由发挥\n\n### 原理\n\n当系统只有一个数据库时，不读写分离的前提下，数据源只有一个。\n这个时候一般是这么配置\n\n- DataSource使用Druid/C3P0等\n- 配置 {% label SqlSessionFactory %}，指定mapper的包位置,xml位置和插件interceptor等，并指定上面配置的数据源\n- 配置 {% label SqlSessionTemplate %}，指定 {% label SqlSessionFactory %}\n- 配置事物管理器 {% label PlatformTransactionManager %} 指定上面的DataSource\n\n\n**当代码执行xxxMapper.queryXXX时，最终应该是通过SqlSessionTemplate执行的。\n所以datasource在一开始的时候就已经塞进去了，属于硬编码，那多数据源是咋搞的呢？或者在哪一步实现的？**\n\n------\n\n一开始这么想其实还是没有弄明白，框架是如何使用数据源的。实际上DataSource是一个接口，要提供Connection也就是与数据库的连接。\n所以我们在实现getConnection的时候就可以做一些策略，返回不同的Connection\n\n```java\npublic interface DataSource  extends CommonDataSource, Wrapper {\n  Connection getConnection() throws SQLException;\n  Connection getConnection(String username, String password) throws SQLException;\n}\n```\n我们实现了 {% label AbstractRoutingDataSource %}，虽然在声明数据源的时候仅声明了一个DataSource，\n但是在获取连接的时候根据存储在ThreadLocal中的策略数据源key，可以选择指定的Datasource返回Connection。\n\n\n\n**AbstractRoutingDataSource的实现逻辑**\n```java\npublic abstract class AbstractRoutingDataSource extends AbstractDataSource implements InitializingBean {\n    private Map<Object, Object> targetDataSources;//目标数据源，需要在声明DataSource的时候 指定\n    /**\n     * 1 获取连接\n     */\n    @Override\n    public Connection getConnection() throws SQLException {\n        return determineTargetDataSource().getConnection();\n    }\n    /**\n     * 2 获取数据源 子类实现determineCurrentLookupKey方法\n     * @return\n     */\n    protected DataSource determineTargetDataSource() {\n        Object lookupKey = this.determineCurrentLookupKey();\n        DataSource dataSource = (DataSource)this.resolvedDataSources.get(lookupKey);\n        if (dataSource == null && (this.lenientFallback || lookupKey == null)) {\n            dataSource = this.resolvedDefaultDataSource;\n        }\n    }\n\n    /**\n     * 3 根据数据源key返回\n     */\n    protected abstract Object determineCurrentLookupKey();\n}\n```\n\n**DynamicDatasource继承AbstractRoutingDataSource，关于取key的逻辑 可以自由发挥**\n```java\npublic class DynamicDatasource extends AbstractRoutingDataSource {\n    private ThreadLocal<String> threadLocal = ThreadLocal.withInitial(() -> \"\");\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return threadLocal.get();//逻辑自己实现\n    }\n}\n```\n\n**声明数据源**\n```java\n@Configuration\npublic class DynamicDatasourceConfig {\n    @Bean\n    public DataSource dataSource(){\n        DynamicDatasource dd = new DynamicDatasource();\n        dd.setTargetDataSources(new HashMap<>());//注入多数据源\n        return dd;\n    }\n}\n```\n\n\n明白了数据源的使用，然后再去定义注解，注解上使用哪个数据源 方法就用哪个数据源\n\n然后再去定义切面就好了，大致的实现原理就这样。\n\n切面的作用是为了确定该使用哪个数据源的key\n\n\n------\n\n所以要实现读写分离，不论是主库还是从库的数据源都要配置好，根据策略判定是读主库还是从库\n\n一开始我想着只配置主库，从库不配，交给dbproxy处理，但是不太合适，因为这中间没有拼装SQL，所有的切面都是为了确定是用哪个datasouce\n\n\n","source":"_posts/mybatis动态数据源.md","raw":"---\ntitle: mybatis动态数据源\n\ncategories: 数据源\ntags:\n- datasource\n- mybatis\n- spring\n- 读写分离\n\n---\n\n## 动态数据源的实现\n\n实现 {% label AbstractRoutingDataSource %} 或者 {% label AbstractDataSource %}\n前者定义好了将数据源存储到Map中以key,value形式存在，后者是父抽象类，可以自由发挥\n\n### 原理\n\n当系统只有一个数据库时，不读写分离的前提下，数据源只有一个。\n这个时候一般是这么配置\n\n- DataSource使用Druid/C3P0等\n- 配置 {% label SqlSessionFactory %}，指定mapper的包位置,xml位置和插件interceptor等，并指定上面配置的数据源\n- 配置 {% label SqlSessionTemplate %}，指定 {% label SqlSessionFactory %}\n- 配置事物管理器 {% label PlatformTransactionManager %} 指定上面的DataSource\n\n\n**当代码执行xxxMapper.queryXXX时，最终应该是通过SqlSessionTemplate执行的。\n所以datasource在一开始的时候就已经塞进去了，属于硬编码，那多数据源是咋搞的呢？或者在哪一步实现的？**\n\n------\n\n一开始这么想其实还是没有弄明白，框架是如何使用数据源的。实际上DataSource是一个接口，要提供Connection也就是与数据库的连接。\n所以我们在实现getConnection的时候就可以做一些策略，返回不同的Connection\n\n```java\npublic interface DataSource  extends CommonDataSource, Wrapper {\n  Connection getConnection() throws SQLException;\n  Connection getConnection(String username, String password) throws SQLException;\n}\n```\n我们实现了 {% label AbstractRoutingDataSource %}，虽然在声明数据源的时候仅声明了一个DataSource，\n但是在获取连接的时候根据存储在ThreadLocal中的策略数据源key，可以选择指定的Datasource返回Connection。\n\n\n\n**AbstractRoutingDataSource的实现逻辑**\n```java\npublic abstract class AbstractRoutingDataSource extends AbstractDataSource implements InitializingBean {\n    private Map<Object, Object> targetDataSources;//目标数据源，需要在声明DataSource的时候 指定\n    /**\n     * 1 获取连接\n     */\n    @Override\n    public Connection getConnection() throws SQLException {\n        return determineTargetDataSource().getConnection();\n    }\n    /**\n     * 2 获取数据源 子类实现determineCurrentLookupKey方法\n     * @return\n     */\n    protected DataSource determineTargetDataSource() {\n        Object lookupKey = this.determineCurrentLookupKey();\n        DataSource dataSource = (DataSource)this.resolvedDataSources.get(lookupKey);\n        if (dataSource == null && (this.lenientFallback || lookupKey == null)) {\n            dataSource = this.resolvedDefaultDataSource;\n        }\n    }\n\n    /**\n     * 3 根据数据源key返回\n     */\n    protected abstract Object determineCurrentLookupKey();\n}\n```\n\n**DynamicDatasource继承AbstractRoutingDataSource，关于取key的逻辑 可以自由发挥**\n```java\npublic class DynamicDatasource extends AbstractRoutingDataSource {\n    private ThreadLocal<String> threadLocal = ThreadLocal.withInitial(() -> \"\");\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return threadLocal.get();//逻辑自己实现\n    }\n}\n```\n\n**声明数据源**\n```java\n@Configuration\npublic class DynamicDatasourceConfig {\n    @Bean\n    public DataSource dataSource(){\n        DynamicDatasource dd = new DynamicDatasource();\n        dd.setTargetDataSources(new HashMap<>());//注入多数据源\n        return dd;\n    }\n}\n```\n\n\n明白了数据源的使用，然后再去定义注解，注解上使用哪个数据源 方法就用哪个数据源\n\n然后再去定义切面就好了，大致的实现原理就这样。\n\n切面的作用是为了确定该使用哪个数据源的key\n\n\n------\n\n所以要实现读写分离，不论是主库还是从库的数据源都要配置好，根据策略判定是读主库还是从库\n\n一开始我想着只配置主库，从库不配，交给dbproxy处理，但是不太合适，因为这中间没有拼装SQL，所有的切面都是为了确定是用哪个datasouce\n\n\n","slug":"mybatis动态数据源","published":1,"date":"2022-07-19T06:21:01.766Z","updated":"2022-07-19T09:09:46.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc0u0001ox108cede26y","content":"<h2 id=\"动态数据源的实现\"><a href=\"#动态数据源的实现\" class=\"headerlink\" title=\"动态数据源的实现\"></a>动态数据源的实现</h2><p>实现 <mark class=\"hl-label default\">AbstractRoutingDataSource</mark>  或者 <mark class=\"hl-label default\">AbstractDataSource</mark> <br>前者定义好了将数据源存储到Map中以key,value形式存在，后者是父抽象类，可以自由发挥</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>当系统只有一个数据库时，不读写分离的前提下，数据源只有一个。<br>这个时候一般是这么配置</p>\n<ul>\n<li>DataSource使用Druid&#x2F;C3P0等</li>\n<li>配置 <mark class=\"hl-label default\">SqlSessionFactory</mark> ，指定mapper的包位置,xml位置和插件interceptor等，并指定上面配置的数据源</li>\n<li>配置 <mark class=\"hl-label default\">SqlSessionTemplate</mark> ，指定 <mark class=\"hl-label default\">SqlSessionFactory</mark> </li>\n<li>配置事物管理器 <mark class=\"hl-label default\">PlatformTransactionManager</mark>  指定上面的DataSource</li>\n</ul>\n<p><strong>当代码执行xxxMapper.queryXXX时，最终应该是通过SqlSessionTemplate执行的。<br>所以datasource在一开始的时候就已经塞进去了，属于硬编码，那多数据源是咋搞的呢？或者在哪一步实现的？</strong></p>\n<hr>\n<p>一开始这么想其实还是没有弄明白，框架是如何使用数据源的。实际上DataSource是一个接口，要提供Connection也就是与数据库的连接。<br>所以我们在实现getConnection的时候就可以做一些策略，返回不同的Connection</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSource</span>  <span class=\"keyword\">extends</span> <span class=\"title class_\">CommonDataSource</span>, Wrapper &#123;</span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">(String username, String password)</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实现了 <mark class=\"hl-label default\">AbstractRoutingDataSource</mark> ，虽然在声明数据源的时候仅声明了一个DataSource，<br>但是在获取连接的时候根据存储在ThreadLocal中的策略数据源key，可以选择指定的Datasource返回Connection。</p>\n<p><strong>AbstractRoutingDataSource的实现逻辑</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractRoutingDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractDataSource</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Object, Object&gt; targetDataSources;<span class=\"comment\">//目标数据源，需要在声明DataSource的时候 指定</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 获取连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> determineTargetDataSource().getConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 2 获取数据源 子类实现determineCurrentLookupKey方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DataSource <span class=\"title function_\">determineTargetDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lookupKey</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.determineCurrentLookupKey();</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> (DataSource)<span class=\"built_in\">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataSource == <span class=\"literal\">null</span> &amp;&amp; (<span class=\"built_in\">this</span>.lenientFallback || lookupKey == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">            dataSource = <span class=\"built_in\">this</span>.resolvedDefaultDataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 3 根据数据源key返回</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Object <span class=\"title function_\">determineCurrentLookupKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>DynamicDatasource继承AbstractRoutingDataSource，关于取key的逻辑 可以自由发挥</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicDatasource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutingDataSource</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadLocal&lt;String&gt; threadLocal = ThreadLocal.withInitial(() -&gt; <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Object <span class=\"title function_\">determineCurrentLookupKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();<span class=\"comment\">//逻辑自己实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>声明数据源</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicDatasourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DynamicDatasource</span> <span class=\"variable\">dd</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DynamicDatasource</span>();</span><br><span class=\"line\">        dd.setTargetDataSources(<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;());<span class=\"comment\">//注入多数据源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>明白了数据源的使用，然后再去定义注解，注解上使用哪个数据源 方法就用哪个数据源</p>\n<p>然后再去定义切面就好了，大致的实现原理就这样。</p>\n<p>切面的作用是为了确定该使用哪个数据源的key</p>\n<hr>\n<p>所以要实现读写分离，不论是主库还是从库的数据源都要配置好，根据策略判定是读主库还是从库</p>\n<p>一开始我想着只配置主库，从库不配，交给dbproxy处理，但是不太合适，因为这中间没有拼装SQL，所有的切面都是为了确定是用哪个datasouce</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h2 id=\"动态数据源的实现\"><a href=\"#动态数据源的实现\" class=\"headerlink\" title=\"动态数据源的实现\"></a>动态数据源的实现</h2><p>实现 <mark class=\"hl-label default\">AbstractRoutingDataSource</mark>  或者 <mark class=\"hl-label default\">AbstractDataSource</mark> <br>前者定义好了将数据源存储到Map中以key,value形式存在，后者是父抽象类，可以自由发挥</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>当系统只有一个数据库时，不读写分离的前提下，数据源只有一个。<br>这个时候一般是这么配置</p>\n<ul>\n<li>DataSource使用Druid&#x2F;C3P0等</li>\n<li>配置 <mark class=\"hl-label default\">SqlSessionFactory</mark> ，指定mapper的包位置,xml位置和插件interceptor等，并指定上面配置的数据源</li>\n<li>配置 <mark class=\"hl-label default\">SqlSessionTemplate</mark> ，指定 <mark class=\"hl-label default\">SqlSessionFactory</mark> </li>\n<li>配置事物管理器 <mark class=\"hl-label default\">PlatformTransactionManager</mark>  指定上面的DataSource</li>\n</ul>\n<p><strong>当代码执行xxxMapper.queryXXX时，最终应该是通过SqlSessionTemplate执行的。<br>所以datasource在一开始的时候就已经塞进去了，属于硬编码，那多数据源是咋搞的呢？或者在哪一步实现的？</strong></p>\n<hr>\n<p>一开始这么想其实还是没有弄明白，框架是如何使用数据源的。实际上DataSource是一个接口，要提供Connection也就是与数据库的连接。<br>所以我们在实现getConnection的时候就可以做一些策略，返回不同的Connection</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSource</span>  <span class=\"keyword\">extends</span> <span class=\"title class_\">CommonDataSource</span>, Wrapper &#123;</span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">(String username, String password)</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实现了 <mark class=\"hl-label default\">AbstractRoutingDataSource</mark> ，虽然在声明数据源的时候仅声明了一个DataSource，<br>但是在获取连接的时候根据存储在ThreadLocal中的策略数据源key，可以选择指定的Datasource返回Connection。</p>\n<p><strong>AbstractRoutingDataSource的实现逻辑</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractRoutingDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractDataSource</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Object, Object&gt; targetDataSources;<span class=\"comment\">//目标数据源，需要在声明DataSource的时候 指定</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 获取连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> determineTargetDataSource().getConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 2 获取数据源 子类实现determineCurrentLookupKey方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DataSource <span class=\"title function_\">determineTargetDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lookupKey</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.determineCurrentLookupKey();</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> (DataSource)<span class=\"built_in\">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataSource == <span class=\"literal\">null</span> &amp;&amp; (<span class=\"built_in\">this</span>.lenientFallback || lookupKey == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">            dataSource = <span class=\"built_in\">this</span>.resolvedDefaultDataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 3 根据数据源key返回</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Object <span class=\"title function_\">determineCurrentLookupKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>DynamicDatasource继承AbstractRoutingDataSource，关于取key的逻辑 可以自由发挥</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicDatasource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutingDataSource</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadLocal&lt;String&gt; threadLocal = ThreadLocal.withInitial(() -&gt; <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Object <span class=\"title function_\">determineCurrentLookupKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();<span class=\"comment\">//逻辑自己实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>声明数据源</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicDatasourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DynamicDatasource</span> <span class=\"variable\">dd</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DynamicDatasource</span>();</span><br><span class=\"line\">        dd.setTargetDataSources(<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;());<span class=\"comment\">//注入多数据源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>明白了数据源的使用，然后再去定义注解，注解上使用哪个数据源 方法就用哪个数据源</p>\n<p>然后再去定义切面就好了，大致的实现原理就这样。</p>\n<p>切面的作用是为了确定该使用哪个数据源的key</p>\n<hr>\n<p>所以要实现读写分离，不论是主库还是从库的数据源都要配置好，根据策略判定是读主库还是从库</p>\n<p>一开始我想着只配置主库，从库不配，交给dbproxy处理，但是不太合适，因为这中间没有拼装SQL，所有的切面都是为了确定是用哪个datasouce</p>\n"},{"title":"慢SQL踩坑记录——不走索引的limit分页优化","keywords":"慢SQL 索引 分页","date":"2022-07-14T07:28:23.187Z","_content":"\n## 背景\n\n生产环境要对历史数据进行 {% label 归档 %}\n比如2022年要对2021年的数据进行归档，简单的实现就是将创建时间小于2022-01-01的记录删除，复制到 {% label 归档库 %}\n```sql\nselect * from table where creat_time<'2022-01-01' limit 1000\n```\n每次取1000条数据，复制到归档库，并删除该1000条数据\n注意，字段create_time {% label 没有索引 %}\n\n当时想法是这条SQL不存在 {% label 深度分页 %}，每次都是获取1000条数据，虽然不走索引，应该没什么大问题\n\n\n## 现象\n\n当我在生产环境执行这条sql时，发现耗时是毫秒级的，几十毫秒就返回结果。（由于没有使用索引，所以本能的要看下能不能查动）\n\n然后解析SQL，也是没有使用索引的，符合预期\n\n![](/images/sql/sql-limit.png)\n\n所以就决定采用这个SQL，然后在测试环境跑了一下归档，前几千条数据很快，后面就发现归档速度 {% label 极其的慢 %}，感觉有问题\n\n## 问题排查\n\n由于归档的时候日志没有任何报错，只能简单看到前后两次归档的数据记录，两次间隔的时间也确实很长。\n（由于归档功能是架构提供的，没有慢SQL检测，所以第一时间没有想到是SQL的问题）\n\n于是就拿着这条SQL查询，结果查不动，一直返回不了结果。起初我还怀疑是否有 {% label 锁占用 %}。。。,一直没有正视SQL本身。\n\n## 问题解决\n\n后来才仔细分析了一下SQL本身。\n\n为什么会查询很慢？ 自己问自己\n\n由于没有使用索引，数据库在执行的时候应该是采用了聚簇索引也就是ID索引数，包含了所有字段的数据\n  - 1.从第一行记录开始取。\n  - 2.每取一行记录，判断下是否满足条件，是则放入结果集，否则抛弃，\n  - 3.结果集条数是否大于1000，是，结束；否，继续1，2操作\n\n![](/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg)\n\n\n所以当归档开始的时候，MySQL只需要遍历1000行就结束（小于2022-01-01的数据大概一万多行），这也是为什么生产环境毫秒级的返回的原因。\n但是随着数据的删除，满足条件的行数越来越少\n假设满足条件的行数有10500条数据，则前10次都可以很快的返回数据，第11次的时候，会很快遍历前500条数据都符合条件，然后继续向后遍历。\n此时数据库里已经没有满足条件的行了，那么会遍历到最后，也就相当于 {% label 遍历全表 %}，最后返回了500条数据。\n\n第12次查询，也是从头遍历，遍历全表以后发现没有数据，返回0，则归档结束。\n\n## 问题优化\n\n给create_time创建索引，或者使用其他索引字段作为查询条件，也就是一定要使用索引\n\n为什么使用索引就避免了慢查询呢？\n\n使用索引可以避免全表扫描。\n\n由于使用了索引，那么在查询的时候就会使用该字段的索引树--非聚簇索引，只有索引和ID字段（需要了解索引的存储原理）\n\n- 1.首先MySQL会根据条件使用二分查询定位符合条件的记录，{% label 一开始就锁定了数据范围 %}\n- 2.每取一行记录，回表查询\n- 3.结果集条数是否大于1000，是，结束；否，继续1，2操作\n\n这时候，第11次查询，在B+tree上，符合条件的只有500条记录了，那就返回500条记录，不会再遍历全表\n这是因为B+tree利用二分查找，可以很快过滤符合条件的数据\n\n\n{% note warning %}\n上面的MySQL执行过程，只是一个大概原理，帮助理解，真正的执行要复杂的多而且会有很多优化\n{% endnote %}\n\n\n \n","source":"_posts/慢SQL踩坑记录——limit分页不走索引.md","raw":"---\ntitle: 慢SQL踩坑记录——不走索引的limit分页优化\nkeywords: 慢SQL 索引 分页\ndate:\n\ncategories: MySQL\ntags:\n- 数据库\n\n---\n\n## 背景\n\n生产环境要对历史数据进行 {% label 归档 %}\n比如2022年要对2021年的数据进行归档，简单的实现就是将创建时间小于2022-01-01的记录删除，复制到 {% label 归档库 %}\n```sql\nselect * from table where creat_time<'2022-01-01' limit 1000\n```\n每次取1000条数据，复制到归档库，并删除该1000条数据\n注意，字段create_time {% label 没有索引 %}\n\n当时想法是这条SQL不存在 {% label 深度分页 %}，每次都是获取1000条数据，虽然不走索引，应该没什么大问题\n\n\n## 现象\n\n当我在生产环境执行这条sql时，发现耗时是毫秒级的，几十毫秒就返回结果。（由于没有使用索引，所以本能的要看下能不能查动）\n\n然后解析SQL，也是没有使用索引的，符合预期\n\n![](/images/sql/sql-limit.png)\n\n所以就决定采用这个SQL，然后在测试环境跑了一下归档，前几千条数据很快，后面就发现归档速度 {% label 极其的慢 %}，感觉有问题\n\n## 问题排查\n\n由于归档的时候日志没有任何报错，只能简单看到前后两次归档的数据记录，两次间隔的时间也确实很长。\n（由于归档功能是架构提供的，没有慢SQL检测，所以第一时间没有想到是SQL的问题）\n\n于是就拿着这条SQL查询，结果查不动，一直返回不了结果。起初我还怀疑是否有 {% label 锁占用 %}。。。,一直没有正视SQL本身。\n\n## 问题解决\n\n后来才仔细分析了一下SQL本身。\n\n为什么会查询很慢？ 自己问自己\n\n由于没有使用索引，数据库在执行的时候应该是采用了聚簇索引也就是ID索引数，包含了所有字段的数据\n  - 1.从第一行记录开始取。\n  - 2.每取一行记录，判断下是否满足条件，是则放入结果集，否则抛弃，\n  - 3.结果集条数是否大于1000，是，结束；否，继续1，2操作\n\n![](/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg)\n\n\n所以当归档开始的时候，MySQL只需要遍历1000行就结束（小于2022-01-01的数据大概一万多行），这也是为什么生产环境毫秒级的返回的原因。\n但是随着数据的删除，满足条件的行数越来越少\n假设满足条件的行数有10500条数据，则前10次都可以很快的返回数据，第11次的时候，会很快遍历前500条数据都符合条件，然后继续向后遍历。\n此时数据库里已经没有满足条件的行了，那么会遍历到最后，也就相当于 {% label 遍历全表 %}，最后返回了500条数据。\n\n第12次查询，也是从头遍历，遍历全表以后发现没有数据，返回0，则归档结束。\n\n## 问题优化\n\n给create_time创建索引，或者使用其他索引字段作为查询条件，也就是一定要使用索引\n\n为什么使用索引就避免了慢查询呢？\n\n使用索引可以避免全表扫描。\n\n由于使用了索引，那么在查询的时候就会使用该字段的索引树--非聚簇索引，只有索引和ID字段（需要了解索引的存储原理）\n\n- 1.首先MySQL会根据条件使用二分查询定位符合条件的记录，{% label 一开始就锁定了数据范围 %}\n- 2.每取一行记录，回表查询\n- 3.结果集条数是否大于1000，是，结束；否，继续1，2操作\n\n这时候，第11次查询，在B+tree上，符合条件的只有500条记录了，那就返回500条记录，不会再遍历全表\n这是因为B+tree利用二分查找，可以很快过滤符合条件的数据\n\n\n{% note warning %}\n上面的MySQL执行过程，只是一个大概原理，帮助理解，真正的执行要复杂的多而且会有很多优化\n{% endnote %}\n\n\n \n","slug":"慢SQL踩坑记录——limit分页不走索引","published":1,"updated":"2022-07-18T01:46:53.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc0w0003ox107vl60zji","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>生产环境要对历史数据进行 <mark class=\"hl-label default\">归档</mark> <br>比如2022年要对2021年的数据进行归档，简单的实现就是将创建时间小于2022-01-01的记录删除，复制到 <mark class=\"hl-label default\">归档库</mark> </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> creat_time<span class=\"operator\">&lt;</span><span class=\"string\">&#x27;2022-01-01&#x27;</span> limit <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<p>每次取1000条数据，复制到归档库，并删除该1000条数据<br>注意，字段create_time <mark class=\"hl-label default\">没有索引</mark> </p>\n<p>当时想法是这条SQL不存在 <mark class=\"hl-label default\">深度分页</mark> ，每次都是获取1000条数据，虽然不走索引，应该没什么大问题</p>\n<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>当我在生产环境执行这条sql时，发现耗时是毫秒级的，几十毫秒就返回结果。（由于没有使用索引，所以本能的要看下能不能查动）</p>\n<p>然后解析SQL，也是没有使用索引的，符合预期</p>\n<p><img src=\"/images/sql/sql-limit.png\"></p>\n<p>所以就决定采用这个SQL，然后在测试环境跑了一下归档，前几千条数据很快，后面就发现归档速度 <mark class=\"hl-label default\">极其的慢</mark> ，感觉有问题</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>由于归档的时候日志没有任何报错，只能简单看到前后两次归档的数据记录，两次间隔的时间也确实很长。<br>（由于归档功能是架构提供的，没有慢SQL检测，所以第一时间没有想到是SQL的问题）</p>\n<p>于是就拿着这条SQL查询，结果查不动，一直返回不了结果。起初我还怀疑是否有 <mark class=\"hl-label default\">锁占用</mark> 。。。,一直没有正视SQL本身。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>后来才仔细分析了一下SQL本身。</p>\n<p>为什么会查询很慢？ 自己问自己</p>\n<p>由于没有使用索引，数据库在执行的时候应该是采用了聚簇索引也就是ID索引数，包含了所有字段的数据</p>\n<ul>\n<li>1.从第一行记录开始取。</li>\n<li>2.每取一行记录，判断下是否满足条件，是则放入结果集，否则抛弃，</li>\n<li>3.结果集条数是否大于1000，是，结束；否，继续1，2操作</li>\n</ul>\n<p><img src=\"/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg\"></p>\n<p>所以当归档开始的时候，MySQL只需要遍历1000行就结束（小于2022-01-01的数据大概一万多行），这也是为什么生产环境毫秒级的返回的原因。<br>但是随着数据的删除，满足条件的行数越来越少<br>假设满足条件的行数有10500条数据，则前10次都可以很快的返回数据，第11次的时候，会很快遍历前500条数据都符合条件，然后继续向后遍历。<br>此时数据库里已经没有满足条件的行了，那么会遍历到最后，也就相当于 <mark class=\"hl-label default\">遍历全表</mark> ，最后返回了500条数据。</p>\n<p>第12次查询，也是从头遍历，遍历全表以后发现没有数据，返回0，则归档结束。</p>\n<h2 id=\"问题优化\"><a href=\"#问题优化\" class=\"headerlink\" title=\"问题优化\"></a>问题优化</h2><p>给create_time创建索引，或者使用其他索引字段作为查询条件，也就是一定要使用索引</p>\n<p>为什么使用索引就避免了慢查询呢？</p>\n<p>使用索引可以避免全表扫描。</p>\n<p>由于使用了索引，那么在查询的时候就会使用该字段的索引树–非聚簇索引，只有索引和ID字段（需要了解索引的存储原理）</p>\n<ul>\n<li>1.首先MySQL会根据条件使用二分查询定位符合条件的记录，<mark class=\"hl-label default\">一开始就锁定了数据范围</mark> </li>\n<li>2.每取一行记录，回表查询</li>\n<li>3.结果集条数是否大于1000，是，结束；否，继续1，2操作</li>\n</ul>\n<p>这时候，第11次查询，在B+tree上，符合条件的只有500条记录了，那就返回500条记录，不会再遍历全表<br>这是因为B+tree利用二分查找，可以很快过滤符合条件的数据</p>\n<div class=\"note warning flat\"><p>上面的MySQL执行过程，只是一个大概原理，帮助理解，真正的执行要复杂的多而且会有很多优化</p>\n</div>\n\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>生产环境要对历史数据进行 <mark class=\"hl-label default\">归档</mark> <br>比如2022年要对2021年的数据进行归档，简单的实现就是将创建时间小于2022-01-01的记录删除，复制到 <mark class=\"hl-label default\">归档库</mark> </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> creat_time<span class=\"operator\">&lt;</span><span class=\"string\">&#x27;2022-01-01&#x27;</span> limit <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<p>每次取1000条数据，复制到归档库，并删除该1000条数据<br>注意，字段create_time <mark class=\"hl-label default\">没有索引</mark> </p>\n<p>当时想法是这条SQL不存在 <mark class=\"hl-label default\">深度分页</mark> ，每次都是获取1000条数据，虽然不走索引，应该没什么大问题</p>\n<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>当我在生产环境执行这条sql时，发现耗时是毫秒级的，几十毫秒就返回结果。（由于没有使用索引，所以本能的要看下能不能查动）</p>\n<p>然后解析SQL，也是没有使用索引的，符合预期</p>\n<p><img src=\"/images/sql/sql-limit.png\"></p>\n<p>所以就决定采用这个SQL，然后在测试环境跑了一下归档，前几千条数据很快，后面就发现归档速度 <mark class=\"hl-label default\">极其的慢</mark> ，感觉有问题</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>由于归档的时候日志没有任何报错，只能简单看到前后两次归档的数据记录，两次间隔的时间也确实很长。<br>（由于归档功能是架构提供的，没有慢SQL检测，所以第一时间没有想到是SQL的问题）</p>\n<p>于是就拿着这条SQL查询，结果查不动，一直返回不了结果。起初我还怀疑是否有 <mark class=\"hl-label default\">锁占用</mark> 。。。,一直没有正视SQL本身。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>后来才仔细分析了一下SQL本身。</p>\n<p>为什么会查询很慢？ 自己问自己</p>\n<p>由于没有使用索引，数据库在执行的时候应该是采用了聚簇索引也就是ID索引数，包含了所有字段的数据</p>\n<ul>\n<li>1.从第一行记录开始取。</li>\n<li>2.每取一行记录，判断下是否满足条件，是则放入结果集，否则抛弃，</li>\n<li>3.结果集条数是否大于1000，是，结束；否，继续1，2操作</li>\n</ul>\n<p><img src=\"/images/sql/v2-a8b5a8802dfc84a4db69efcbe5283be6_r.jpeg\"></p>\n<p>所以当归档开始的时候，MySQL只需要遍历1000行就结束（小于2022-01-01的数据大概一万多行），这也是为什么生产环境毫秒级的返回的原因。<br>但是随着数据的删除，满足条件的行数越来越少<br>假设满足条件的行数有10500条数据，则前10次都可以很快的返回数据，第11次的时候，会很快遍历前500条数据都符合条件，然后继续向后遍历。<br>此时数据库里已经没有满足条件的行了，那么会遍历到最后，也就相当于 <mark class=\"hl-label default\">遍历全表</mark> ，最后返回了500条数据。</p>\n<p>第12次查询，也是从头遍历，遍历全表以后发现没有数据，返回0，则归档结束。</p>\n<h2 id=\"问题优化\"><a href=\"#问题优化\" class=\"headerlink\" title=\"问题优化\"></a>问题优化</h2><p>给create_time创建索引，或者使用其他索引字段作为查询条件，也就是一定要使用索引</p>\n<p>为什么使用索引就避免了慢查询呢？</p>\n<p>使用索引可以避免全表扫描。</p>\n<p>由于使用了索引，那么在查询的时候就会使用该字段的索引树–非聚簇索引，只有索引和ID字段（需要了解索引的存储原理）</p>\n<ul>\n<li>1.首先MySQL会根据条件使用二分查询定位符合条件的记录，<mark class=\"hl-label default\">一开始就锁定了数据范围</mark> </li>\n<li>2.每取一行记录，回表查询</li>\n<li>3.结果集条数是否大于1000，是，结束；否，继续1，2操作</li>\n</ul>\n<p>这时候，第11次查询，在B+tree上，符合条件的只有500条记录了，那就返回500条记录，不会再遍历全表<br>这是因为B+tree利用二分查找，可以很快过滤符合条件的数据</p>\n<div class=\"note warning flat\"><p>上面的MySQL执行过程，只是一个大概原理，帮助理解，真正的执行要复杂的多而且会有很多优化</p>\n</div>\n\n\n"},{"title":"技术链接","_content":"\n## 文章收录\n\n### Java基础\n- [过滤器filter和拦截器interceptor的区别、用法、场景](https://segmentfault.com/a/1190000037755221)\n\n### springboot\n- [springboot2.0 优雅停机](https://www.jianshu.com/p/0c49eb23c627)\n- [springboot2.5 优雅停机](https://blog.51cto.com/u_15162069/2897813)\n\n### 博客相关\n- [butterfly美化](https://article.itxueyuan.com/JA5dbR)","source":"_posts/技术链接.md","raw":"---\ntitle: 技术链接\n\ncategories: Java,Springboot\ntags:\n- 拦截器\n- 过滤器\n- servlet\n- springboot\n- 优雅停机\n\n---\n\n## 文章收录\n\n### Java基础\n- [过滤器filter和拦截器interceptor的区别、用法、场景](https://segmentfault.com/a/1190000037755221)\n\n### springboot\n- [springboot2.0 优雅停机](https://www.jianshu.com/p/0c49eb23c627)\n- [springboot2.5 优雅停机](https://blog.51cto.com/u_15162069/2897813)\n\n### 博客相关\n- [butterfly美化](https://article.itxueyuan.com/JA5dbR)","slug":"技术链接","published":1,"date":"2022-07-18T01:46:53.429Z","updated":"2022-07-19T11:56:32.125Z","_id":"cl5s3wc0x0007ox103jnvep5o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"文章收录\"><a href=\"#文章收录\" class=\"headerlink\" title=\"文章收录\"></a>文章收录</h2><h3 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000037755221\">过滤器filter和拦截器interceptor的区别、用法、场景</a></li>\n</ul>\n<h3 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/0c49eb23c627\">springboot2.0 优雅停机</a></li>\n<li><a href=\"https://blog.51cto.com/u_15162069/2897813\">springboot2.5 优雅停机</a></li>\n</ul>\n<h3 id=\"博客相关\"><a href=\"#博客相关\" class=\"headerlink\" title=\"博客相关\"></a>博客相关</h3><ul>\n<li><a href=\"https://article.itxueyuan.com/JA5dbR\">butterfly美化</a></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h2 id=\"文章收录\"><a href=\"#文章收录\" class=\"headerlink\" title=\"文章收录\"></a>文章收录</h2><h3 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000037755221\">过滤器filter和拦截器interceptor的区别、用法、场景</a></li>\n</ul>\n<h3 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/0c49eb23c627\">springboot2.0 优雅停机</a></li>\n<li><a href=\"https://blog.51cto.com/u_15162069/2897813\">springboot2.5 优雅停机</a></li>\n</ul>\n<h3 id=\"博客相关\"><a href=\"#博客相关\" class=\"headerlink\" title=\"博客相关\"></a>博客相关</h3><ul>\n<li><a href=\"https://article.itxueyuan.com/JA5dbR\">butterfly美化</a></li>\n</ul>\n"},{"title":"2022夏日纪实","keywords":"天气 高温","_content":"\n\n时间：2022年7月12日晚8点30分\n地点：南京雨花\n温度：32度\n事件：下班\n\n\n晚上的室外温度居然达到了32度，像蒸桑拿一样，简直不敢想象，明年再回头看下是不是还是这样。。。\n\n周末，白天必须开空调，晚上也是空调不断，只有在有空调的地方，才能生活这样子\n\n------\n时间：2022年7月15日早8点30分\n地点：南京\n\n早上在床上关掉空调，一身汗，太热了\n","source":"_posts/夏日纪实.md","raw":"---\ntitle: 2022夏日纪实\nkeywords: 天气 高温\n\ncategories: 日记\ntags:\n- 天气\n\n---\n\n\n时间：2022年7月12日晚8点30分\n地点：南京雨花\n温度：32度\n事件：下班\n\n\n晚上的室外温度居然达到了32度，像蒸桑拿一样，简直不敢想象，明年再回头看下是不是还是这样。。。\n\n周末，白天必须开空调，晚上也是空调不断，只有在有空调的地方，才能生活这样子\n\n------\n时间：2022年7月15日早8点30分\n地点：南京\n\n早上在床上关掉空调，一身汗，太热了\n","slug":"夏日纪实","published":1,"date":"2022-07-12T12:22:36.525Z","updated":"2022-07-18T01:46:53.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc0y0009ox10hkbkcxms","content":"<p>时间：2022年7月12日晚8点30分<br>地点：南京雨花<br>温度：32度<br>事件：下班</p>\n<p>晚上的室外温度居然达到了32度，像蒸桑拿一样，简直不敢想象，明年再回头看下是不是还是这样。。。</p>\n<p>周末，白天必须开空调，晚上也是空调不断，只有在有空调的地方，才能生活这样子</p>\n<hr>\n<p>时间：2022年7月15日早8点30分<br>地点：南京</p>\n<p>早上在床上关掉空调，一身汗，太热了</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<p>时间：2022年7月12日晚8点30分<br>地点：南京雨花<br>温度：32度<br>事件：下班</p>\n<p>晚上的室外温度居然达到了32度，像蒸桑拿一样，简直不敢想象，明年再回头看下是不是还是这样。。。</p>\n<p>周末，白天必须开空调，晚上也是空调不断，只有在有空调的地方，才能生活这样子</p>\n<hr>\n<p>时间：2022年7月15日早8点30分<br>地点：南京</p>\n<p>早上在床上关掉空调，一身汗，太热了</p>\n"},{"title":"hexo-butterfly-文章美化语法收录","keywords":"教程 butterfly hexo","date":"2022-07-14T07:28:23.187Z","_content":"\n\n**这里的效果是针对hexo框架并且主题是{% label butterfly %}**\n\n-----\n\n### node 标签\n语法：\n```text\n{% note [class]  %}\n你的文本\n{% endnote %}\n```\n支持的 class 种类包括 default primary success info warning danger\n例如：\n```text\n{% note success  %}\noh body! How excellent you are with the same nine years education.\n{% endnote %}\n```\n\n**效果展示(该效果可能被butterfly主题美化了)**\n{% note warning %}\nwarning \n{% endnote %}\n\n\n{% note danger %}\ndanger\n{% endnote %}\n\n\n{% note info %}\ninfo\n{% endnote %}\n\n\n{% note success %}\nsuccess\n{% endnote %}\n\n\n{% note primary %}\nprimary\n{% endnote %}\n\n\n### label 标签 \n通过 label 标签可以为文字添加背景色，语法如下：\n```text\n语法：同九年, {% label 汝何秀 %}\n```\n**效果：**\n同九年, {% label 汝何秀 %}\n\n备注：应该可以选定颜色的 但是不知道咋搞\n\n### 按钮\n\n```text\n语法：{% btn #, 按钮 %}\n```\n效果：\n{% btn #, 按钮 %}\n\n\n### tab标签\n语法：\n```text\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n```\n效果：\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}","source":"_posts/hexo-butterfly-文章美化语法收录.md","raw":"---\ntitle: hexo-butterfly-文章美化语法收录\nkeywords: 教程 butterfly hexo\ndate:\n\ncategories: \n- 教程\ntags:\n- API使用\n- 语法\n- hexo\n\n---\n\n\n**这里的效果是针对hexo框架并且主题是{% label butterfly %}**\n\n-----\n\n### node 标签\n语法：\n```text\n{% note [class]  %}\n你的文本\n{% endnote %}\n```\n支持的 class 种类包括 default primary success info warning danger\n例如：\n```text\n{% note success  %}\noh body! How excellent you are with the same nine years education.\n{% endnote %}\n```\n\n**效果展示(该效果可能被butterfly主题美化了)**\n{% note warning %}\nwarning \n{% endnote %}\n\n\n{% note danger %}\ndanger\n{% endnote %}\n\n\n{% note info %}\ninfo\n{% endnote %}\n\n\n{% note success %}\nsuccess\n{% endnote %}\n\n\n{% note primary %}\nprimary\n{% endnote %}\n\n\n### label 标签 \n通过 label 标签可以为文字添加背景色，语法如下：\n```text\n语法：同九年, {% label 汝何秀 %}\n```\n**效果：**\n同九年, {% label 汝何秀 %}\n\n备注：应该可以选定颜色的 但是不知道咋搞\n\n### 按钮\n\n```text\n语法：{% btn #, 按钮 %}\n```\n效果：\n{% btn #, 按钮 %}\n\n\n### tab标签\n语法：\n```text\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n```\n效果：\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}","slug":"hexo-butterfly-文章美化语法收录","published":1,"updated":"2022-07-15T06:48:10.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc110012ox10aj2r29vb","content":"<p><strong>这里的效果是针对hexo框架并且主题是<mark class=\"hl-label default\">butterfly</mark> </strong></p>\n<hr>\n<h3 id=\"node-标签\"><a href=\"#node-标签\" class=\"headerlink\" title=\"node 标签\"></a>node 标签</h3><p>语法：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class]  %&#125;</span><br><span class=\"line\">你的文本</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<p>支持的 class 种类包括 default primary success info warning danger<br>例如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note success  %&#125;</span><br><span class=\"line\">oh body! How excellent you are with the same nine years education.</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果展示(该效果可能被butterfly主题美化了)</strong></p>\n<div class=\"note warning flat\"><p>warning </p>\n</div>\n\n\n<div class=\"note danger flat\"><p>danger</p>\n</div>\n\n\n<div class=\"note info flat\"><p>info</p>\n</div>\n\n\n<div class=\"note success flat\"><p>success</p>\n</div>\n\n\n<div class=\"note primary flat\"><p>primary</p>\n</div>\n\n\n<h3 id=\"label-标签\"><a href=\"#label-标签\" class=\"headerlink\" title=\"label 标签\"></a>label 标签</h3><p>通过 label 标签可以为文字添加背景色，语法如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：同九年, &#123;% label 汝何秀 %&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong><br>同九年, <mark class=\"hl-label default\">汝何秀</mark> </p>\n<p>备注：应该可以选定颜色的 但是不知道咋搞</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：&#123;% btn #, 按钮 %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<a class=\"btn-beautify \" href=\"#\" \n  title=\"按钮\"><span>按钮</span></a>\n\n\n<h3 id=\"tab标签\"><a href=\"#tab标签\" class=\"headerlink\" title=\"tab标签\"></a>tab标签</h3><p>语法：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab标签列表 %&#125;</span><br><span class=\"line\">  &lt;!-- tab 标签页1 --&gt;</span><br><span class=\"line\">    标签页1文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页2 --&gt;</span><br><span class=\"line\">    标签页2文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页3 --&gt;</span><br><span class=\"line\">    标签页3文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<div class=\"tabs\" id=\"tab标签列表\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#tab标签列表-1\">标签页1</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab标签列表-2\">标签页2</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab标签列表-3\">标签页3</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"tab标签列表-1\"><p>  标签页1文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab标签列表-2\"><p>  标签页2文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab标签列表-3\"><p>  标签页3文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<p><strong>这里的效果是针对hexo框架并且主题是<mark class=\"hl-label default\">butterfly</mark> </strong></p>\n<hr>\n<h3 id=\"node-标签\"><a href=\"#node-标签\" class=\"headerlink\" title=\"node 标签\"></a>node 标签</h3><p>语法：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class]  %&#125;</span><br><span class=\"line\">你的文本</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<p>支持的 class 种类包括 default primary success info warning danger<br>例如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note success  %&#125;</span><br><span class=\"line\">oh body! How excellent you are with the same nine years education.</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果展示(该效果可能被butterfly主题美化了)</strong></p>\n<div class=\"note warning flat\"><p>warning </p>\n</div>\n\n\n<div class=\"note danger flat\"><p>danger</p>\n</div>\n\n\n<div class=\"note info flat\"><p>info</p>\n</div>\n\n\n<div class=\"note success flat\"><p>success</p>\n</div>\n\n\n<div class=\"note primary flat\"><p>primary</p>\n</div>\n\n\n<h3 id=\"label-标签\"><a href=\"#label-标签\" class=\"headerlink\" title=\"label 标签\"></a>label 标签</h3><p>通过 label 标签可以为文字添加背景色，语法如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：同九年, &#123;% label 汝何秀 %&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong><br>同九年, <mark class=\"hl-label default\">汝何秀</mark> </p>\n<p>备注：应该可以选定颜色的 但是不知道咋搞</p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：&#123;% btn #, 按钮 %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<a class=\"btn-beautify \" href=\"#\" \n  title=\"按钮\"><span>按钮</span></a>\n\n\n<h3 id=\"tab标签\"><a href=\"#tab标签\" class=\"headerlink\" title=\"tab标签\"></a>tab标签</h3><p>语法：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab标签列表 %&#125;</span><br><span class=\"line\">  &lt;!-- tab 标签页1 --&gt;</span><br><span class=\"line\">    标签页1文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页2 --&gt;</span><br><span class=\"line\">    标签页2文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页3 --&gt;</span><br><span class=\"line\">    标签页3文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<div class=\"tabs\" id=\"tab标签列表\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#tab标签列表-1\">标签页1</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab标签列表-2\">标签页2</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab标签列表-3\">标签页3</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"tab标签列表-1\"><p>  标签页1文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab标签列表-2\"><p>  标签页2文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab标签列表-3\"><p>  标签页3文本内容</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>"},{"title":"readme","_content":"\n文章设置\ntitle\t【必需】文章标题\ndate\t【必需】文章创建日期\nupdated\t【可选】文章更新日期\ntags\t【可选】文章标签\ncategories\t【可选】文章分类\nkeywords\t【可选】文章关键字\ndescription\t【可选】文章描述\ntop_img\t【可选】文章顶部图片\ncover\t【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)\ncopyright\t【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)\ncopyright_author\t【可选】文章版权模块的文章作者\ncopyright_author_href\t【可选】文章版权模块的文章作者链接\ncopyright_url\t【可选】文章版权模块的文章連結链接\ncopyright_info\t【可选】文章版权模块的版權聲明文字\nhighlight_shrink\t【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)\naside\t【可选】显示侧边栏(默认true)\n\n","source":"_drafts/readme.md","raw":"---\ntitle: readme\ntags:\n---\n\n文章设置\ntitle\t【必需】文章标题\ndate\t【必需】文章创建日期\nupdated\t【可选】文章更新日期\ntags\t【可选】文章标签\ncategories\t【可选】文章分类\nkeywords\t【可选】文章关键字\ndescription\t【可选】文章描述\ntop_img\t【可选】文章顶部图片\ncover\t【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)\ncopyright\t【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)\ncopyright_author\t【可选】文章版权模块的文章作者\ncopyright_author_href\t【可选】文章版权模块的文章作者链接\ncopyright_url\t【可选】文章版权模块的文章連結链接\ncopyright_info\t【可选】文章版权模块的版權聲明文字\nhighlight_shrink\t【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)\naside\t【可选】显示侧边栏(默认true)\n\n","slug":"readme","published":0,"date":"2022-07-13T02:19:42.902Z","updated":"2022-07-13T02:44:52.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc12001box10e5pid52n","content":"<p>文章设置<br>title\t【必需】文章标题<br>date\t【必需】文章创建日期<br>updated\t【可选】文章更新日期<br>tags\t【可选】文章标签<br>categories\t【可选】文章分类<br>keywords\t【可选】文章关键字<br>description\t【可选】文章描述<br>top_img\t【可选】文章顶部图片<br>cover\t【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>copyright\t【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author\t【可选】文章版权模块的文章作者<br>copyright_author_href\t【可选】文章版权模块的文章作者链接<br>copyright_url\t【可选】文章版权模块的文章連結链接<br>copyright_info\t【可选】文章版权模块的版權聲明文字<br>highlight_shrink\t【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)<br>aside\t【可选】显示侧边栏(默认true)</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<p>文章设置<br>title\t【必需】文章标题<br>date\t【必需】文章创建日期<br>updated\t【可选】文章更新日期<br>tags\t【可选】文章标签<br>categories\t【可选】文章分类<br>keywords\t【可选】文章关键字<br>description\t【可选】文章描述<br>top_img\t【可选】文章顶部图片<br>cover\t【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>copyright\t【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author\t【可选】文章版权模块的文章作者<br>copyright_author_href\t【可选】文章版权模块的文章作者链接<br>copyright_url\t【可选】文章版权模块的文章連結链接<br>copyright_info\t【可选】文章版权模块的版權聲明文字<br>highlight_shrink\t【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)<br>aside\t【可选】显示侧边栏(默认true)</p>\n"},{"title":"系统拆分方法论","keywords":"系统拆分 微服务拆分 微服务 架构拆分","date":"2022-07-13T02:42:22.383Z","_content":"\n## 系统拆分方法论\n\n随着业务的发展，单系统承载的业务功能越来越多，团队开发人员也在增加，将会带来一系列问题。\n\n- 需求多，系统发布次数会增加，为了系统稳定从而要限制发布窗口，这也就会导致多个需求在同一天上线，一个功能有问题则所有的代码都要回滚\n- 单系统功能业务模块较多时，A业务的代码开发可能影响B业务，比如一些公共模块的改动\n- 团队人员管理方面，系统出了一些问题，到底谁来负责处理，谁来监控DB,JVM,QPS,RT等数据\n\n-------\n\n系统拆分可以解决大部分问题，但怎么去把代码拆出来，还是需要一些方法论支持的。\n\n比如，**老系统的代码如何处理？新系统如何上线？两者的上下线如何保证现有功能的稳定？代码要怎么拆？如何梳理？\n会不会漏了某些功能？**\n\n我会结合空想出来的idea和实战中的具体做法去总结\n\n--------\n\n### 系统/微服务拆分的原则\n- 1.单一职责原则\n  - 按照大类拆分、业务类型拆分、模块拆分 \n- 2.粒度适中原则\n  - 一个接口拆一个系统出来 显然不太适合 \n- 3.避免环形依赖和双向依赖\n  - 理清链路调用关系，强依赖可以使用MQ解耦 \n- 4.考虑团队结构\n  - 我的系统我负责，每个系统分配负责人，该负责人统筹该系统的所有需求、发布上线、问题解决、监控告警等 \n\n\n\n### 梳理拆分范围\n\n#### 1.流量入口\n- 1对外围暴露接口API\n- 2.对内部暴露的controller\n- 3.MQ消费  kafak/Rabbit/Rocket\n- 4.job定时任务 xxl-job/spring/java定时任务\n- 5.Apollo/ZK 配置变更监听 \n\n#### 2.流量出口\n- 1.API接口调用 ES查询 redis调用\n- 2.MQ推送  kafak/Rabbit/Rocket\n- 3.ES推送 \n- 4.缓存\n- 5.数据库MySQL\n\n#### 3.架构部分\n- 1.filter过滤器 登录拦截等\n- 2.mybatis拦截器\n- 3.AOP切面\n- 4.线程池\n- 5.全链路\n\n#### 4.配置部分\n- 1.YML配置\n  + a. MQ kafaka Redis Apollo\n  + b. consul 日志中心 Druid连接池\n  + c. 框架配置 全链路\n- 2.pass机器配置\n- 3.CICD配置\n- 4.Apollo配置\n- 5.缓存配置\n\n\n\n \n## 实操\n\n### 代码剥离/迁移\n\n**代码迁移有两种方案**：\n\n- fork原来的代码库，在fork库上删除不相关代码\n- 新建代码库，copy/剪切相关代码到新库中\n\n我选择了第二种方案，我是这么考虑的\n\n第一种方案对于环境来说比较稳妥，配置什么的都是一样的，但是我认为迁出的代码只是一小部分，\n而删除的代码应该占 {% label 50%-80% %}，去判断某一块代码是否应该删除，会占用更多的精力和时间，\n而分离要迁出的代码只关心哪些要剥离就好.\n\n主要是我怕删除的时候会一不小心就删掉了一些细节，而剥离剪切更好掌控力度\n\n{% note warning  %}\n但是仔细想想，又好像没什么区别。毕竟一块代码你总要判断塔到底是否要剥离\n除非你知道要剥离哪些功能，而且涉及的包或者接口你都比较清楚\n事实上，你不可能全面了解一个很复杂的系统的涉及的所有业务的\n{% endnote %}\n\n\n刚开始操作的时候，我很天真的按照接口粒度来拆分，一个接口拆了我大概2个小时。\n从API到controller到Service到实现类，此时service还没完全迁移完，我就放弃了 {% label 由于剥离的时候还想着优化一下代码占用了一点时间 %}\n\n由于按照接口来，剪切的时候会有很多依赖类不存在，需要一个个的把依赖的类剪切过来，而且我改了包目录，\n还要一个一个的import，这部分占用了大量的时间，效率是在是太慢了\n\n-----\n所以我还是选择了第一种方案，先整理下所有的接口到Excel表里，记录哪些API对应哪些业务，\n整理代码功能点，然后记录是否要剥离。最后照着表格删除不用的即可\n\n等代码整体都稳定了，然后再去定义包结构，优化模块，此时类的依赖就会随着包结构的改变而改变，不用再操心了\n\n切忌迁移之前就定义好包目录，这样包的依赖处理会很头疼","source":"_posts/系统拆分方法论.md","raw":"---\ntitle: 系统拆分方法论\nkeywords: 系统拆分 微服务拆分 微服务 架构拆分\ndate:\n\ncategories: 架构\ntags:\n- 系统拆分\n- 微服务拆分\n\n---\n\n## 系统拆分方法论\n\n随着业务的发展，单系统承载的业务功能越来越多，团队开发人员也在增加，将会带来一系列问题。\n\n- 需求多，系统发布次数会增加，为了系统稳定从而要限制发布窗口，这也就会导致多个需求在同一天上线，一个功能有问题则所有的代码都要回滚\n- 单系统功能业务模块较多时，A业务的代码开发可能影响B业务，比如一些公共模块的改动\n- 团队人员管理方面，系统出了一些问题，到底谁来负责处理，谁来监控DB,JVM,QPS,RT等数据\n\n-------\n\n系统拆分可以解决大部分问题，但怎么去把代码拆出来，还是需要一些方法论支持的。\n\n比如，**老系统的代码如何处理？新系统如何上线？两者的上下线如何保证现有功能的稳定？代码要怎么拆？如何梳理？\n会不会漏了某些功能？**\n\n我会结合空想出来的idea和实战中的具体做法去总结\n\n--------\n\n### 系统/微服务拆分的原则\n- 1.单一职责原则\n  - 按照大类拆分、业务类型拆分、模块拆分 \n- 2.粒度适中原则\n  - 一个接口拆一个系统出来 显然不太适合 \n- 3.避免环形依赖和双向依赖\n  - 理清链路调用关系，强依赖可以使用MQ解耦 \n- 4.考虑团队结构\n  - 我的系统我负责，每个系统分配负责人，该负责人统筹该系统的所有需求、发布上线、问题解决、监控告警等 \n\n\n\n### 梳理拆分范围\n\n#### 1.流量入口\n- 1对外围暴露接口API\n- 2.对内部暴露的controller\n- 3.MQ消费  kafak/Rabbit/Rocket\n- 4.job定时任务 xxl-job/spring/java定时任务\n- 5.Apollo/ZK 配置变更监听 \n\n#### 2.流量出口\n- 1.API接口调用 ES查询 redis调用\n- 2.MQ推送  kafak/Rabbit/Rocket\n- 3.ES推送 \n- 4.缓存\n- 5.数据库MySQL\n\n#### 3.架构部分\n- 1.filter过滤器 登录拦截等\n- 2.mybatis拦截器\n- 3.AOP切面\n- 4.线程池\n- 5.全链路\n\n#### 4.配置部分\n- 1.YML配置\n  + a. MQ kafaka Redis Apollo\n  + b. consul 日志中心 Druid连接池\n  + c. 框架配置 全链路\n- 2.pass机器配置\n- 3.CICD配置\n- 4.Apollo配置\n- 5.缓存配置\n\n\n\n \n## 实操\n\n### 代码剥离/迁移\n\n**代码迁移有两种方案**：\n\n- fork原来的代码库，在fork库上删除不相关代码\n- 新建代码库，copy/剪切相关代码到新库中\n\n我选择了第二种方案，我是这么考虑的\n\n第一种方案对于环境来说比较稳妥，配置什么的都是一样的，但是我认为迁出的代码只是一小部分，\n而删除的代码应该占 {% label 50%-80% %}，去判断某一块代码是否应该删除，会占用更多的精力和时间，\n而分离要迁出的代码只关心哪些要剥离就好.\n\n主要是我怕删除的时候会一不小心就删掉了一些细节，而剥离剪切更好掌控力度\n\n{% note warning  %}\n但是仔细想想，又好像没什么区别。毕竟一块代码你总要判断塔到底是否要剥离\n除非你知道要剥离哪些功能，而且涉及的包或者接口你都比较清楚\n事实上，你不可能全面了解一个很复杂的系统的涉及的所有业务的\n{% endnote %}\n\n\n刚开始操作的时候，我很天真的按照接口粒度来拆分，一个接口拆了我大概2个小时。\n从API到controller到Service到实现类，此时service还没完全迁移完，我就放弃了 {% label 由于剥离的时候还想着优化一下代码占用了一点时间 %}\n\n由于按照接口来，剪切的时候会有很多依赖类不存在，需要一个个的把依赖的类剪切过来，而且我改了包目录，\n还要一个一个的import，这部分占用了大量的时间，效率是在是太慢了\n\n-----\n所以我还是选择了第一种方案，先整理下所有的接口到Excel表里，记录哪些API对应哪些业务，\n整理代码功能点，然后记录是否要剥离。最后照着表格删除不用的即可\n\n等代码整体都稳定了，然后再去定义包结构，优化模块，此时类的依赖就会随着包结构的改变而改变，不用再操心了\n\n切忌迁移之前就定义好包目录，这样包的依赖处理会很头疼","slug":"系统拆分方法论","published":1,"updated":"2022-07-18T11:27:05.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5s3wc13001cox10g0gnh8ay","content":"<h2 id=\"系统拆分方法论\"><a href=\"#系统拆分方法论\" class=\"headerlink\" title=\"系统拆分方法论\"></a>系统拆分方法论</h2><p>随着业务的发展，单系统承载的业务功能越来越多，团队开发人员也在增加，将会带来一系列问题。</p>\n<ul>\n<li>需求多，系统发布次数会增加，为了系统稳定从而要限制发布窗口，这也就会导致多个需求在同一天上线，一个功能有问题则所有的代码都要回滚</li>\n<li>单系统功能业务模块较多时，A业务的代码开发可能影响B业务，比如一些公共模块的改动</li>\n<li>团队人员管理方面，系统出了一些问题，到底谁来负责处理，谁来监控DB,JVM,QPS,RT等数据</li>\n</ul>\n<hr>\n<p>系统拆分可以解决大部分问题，但怎么去把代码拆出来，还是需要一些方法论支持的。</p>\n<p>比如，<strong>老系统的代码如何处理？新系统如何上线？两者的上下线如何保证现有功能的稳定？代码要怎么拆？如何梳理？<br>会不会漏了某些功能？</strong></p>\n<p>我会结合空想出来的idea和实战中的具体做法去总结</p>\n<hr>\n<h3 id=\"系统-x2F-微服务拆分的原则\"><a href=\"#系统-x2F-微服务拆分的原则\" class=\"headerlink\" title=\"系统&#x2F;微服务拆分的原则\"></a>系统&#x2F;微服务拆分的原则</h3><ul>\n<li>1.单一职责原则<ul>\n<li>按照大类拆分、业务类型拆分、模块拆分</li>\n</ul>\n</li>\n<li>2.粒度适中原则<ul>\n<li>一个接口拆一个系统出来 显然不太适合</li>\n</ul>\n</li>\n<li>3.避免环形依赖和双向依赖<ul>\n<li>理清链路调用关系，强依赖可以使用MQ解耦</li>\n</ul>\n</li>\n<li>4.考虑团队结构<ul>\n<li>我的系统我负责，每个系统分配负责人，该负责人统筹该系统的所有需求、发布上线、问题解决、监控告警等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"梳理拆分范围\"><a href=\"#梳理拆分范围\" class=\"headerlink\" title=\"梳理拆分范围\"></a>梳理拆分范围</h3><h4 id=\"1-流量入口\"><a href=\"#1-流量入口\" class=\"headerlink\" title=\"1.流量入口\"></a>1.流量入口</h4><ul>\n<li>1对外围暴露接口API</li>\n<li>2.对内部暴露的controller</li>\n<li>3.MQ消费  kafak&#x2F;Rabbit&#x2F;Rocket</li>\n<li>4.job定时任务 xxl-job&#x2F;spring&#x2F;java定时任务</li>\n<li>5.Apollo&#x2F;ZK 配置变更监听</li>\n</ul>\n<h4 id=\"2-流量出口\"><a href=\"#2-流量出口\" class=\"headerlink\" title=\"2.流量出口\"></a>2.流量出口</h4><ul>\n<li>1.API接口调用 ES查询 redis调用</li>\n<li>2.MQ推送  kafak&#x2F;Rabbit&#x2F;Rocket</li>\n<li>3.ES推送 </li>\n<li>4.缓存</li>\n<li>5.数据库MySQL</li>\n</ul>\n<h4 id=\"3-架构部分\"><a href=\"#3-架构部分\" class=\"headerlink\" title=\"3.架构部分\"></a>3.架构部分</h4><ul>\n<li>1.filter过滤器 登录拦截等</li>\n<li>2.mybatis拦截器</li>\n<li>3.AOP切面</li>\n<li>4.线程池</li>\n<li>5.全链路</li>\n</ul>\n<h4 id=\"4-配置部分\"><a href=\"#4-配置部分\" class=\"headerlink\" title=\"4.配置部分\"></a>4.配置部分</h4><ul>\n<li>1.YML配置<ul>\n<li>a. MQ kafaka Redis Apollo</li>\n<li>b. consul 日志中心 Druid连接池</li>\n<li>c. 框架配置 全链路</li>\n</ul>\n</li>\n<li>2.pass机器配置</li>\n<li>3.CICD配置</li>\n<li>4.Apollo配置</li>\n<li>5.缓存配置</li>\n</ul>\n<h2 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h2><h3 id=\"代码剥离-x2F-迁移\"><a href=\"#代码剥离-x2F-迁移\" class=\"headerlink\" title=\"代码剥离&#x2F;迁移\"></a>代码剥离&#x2F;迁移</h3><p><strong>代码迁移有两种方案</strong>：</p>\n<ul>\n<li>fork原来的代码库，在fork库上删除不相关代码</li>\n<li>新建代码库，copy&#x2F;剪切相关代码到新库中</li>\n</ul>\n<p>我选择了第二种方案，我是这么考虑的</p>\n<p>第一种方案对于环境来说比较稳妥，配置什么的都是一样的，但是我认为迁出的代码只是一小部分，<br>而删除的代码应该占 <mark class=\"hl-label default\">50%-80%</mark> ，去判断某一块代码是否应该删除，会占用更多的精力和时间，<br>而分离要迁出的代码只关心哪些要剥离就好.</p>\n<p>主要是我怕删除的时候会一不小心就删掉了一些细节，而剥离剪切更好掌控力度</p>\n<div class=\"note warning flat\"><p>但是仔细想想，又好像没什么区别。毕竟一块代码你总要判断塔到底是否要剥离<br>除非你知道要剥离哪些功能，而且涉及的包或者接口你都比较清楚<br>事实上，你不可能全面了解一个很复杂的系统的涉及的所有业务的</p>\n</div>\n\n\n<p>刚开始操作的时候，我很天真的按照接口粒度来拆分，一个接口拆了我大概2个小时。<br>从API到controller到Service到实现类，此时service还没完全迁移完，我就放弃了 <mark class=\"hl-label default\">由于剥离的时候还想着优化一下代码占用了一点时间</mark> </p>\n<p>由于按照接口来，剪切的时候会有很多依赖类不存在，需要一个个的把依赖的类剪切过来，而且我改了包目录，<br>还要一个一个的import，这部分占用了大量的时间，效率是在是太慢了</p>\n<hr>\n<p>所以我还是选择了第一种方案，先整理下所有的接口到Excel表里，记录哪些API对应哪些业务，<br>整理代码功能点，然后记录是否要剥离。最后照着表格删除不用的即可</p>\n<p>等代码整体都稳定了，然后再去定义包结构，优化模块，此时类的依赖就会随着包结构的改变而改变，不用再操心了</p>\n<p>切忌迁移之前就定义好包目录，这样包的依赖处理会很头疼</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h2 id=\"系统拆分方法论\"><a href=\"#系统拆分方法论\" class=\"headerlink\" title=\"系统拆分方法论\"></a>系统拆分方法论</h2><p>随着业务的发展，单系统承载的业务功能越来越多，团队开发人员也在增加，将会带来一系列问题。</p>\n<ul>\n<li>需求多，系统发布次数会增加，为了系统稳定从而要限制发布窗口，这也就会导致多个需求在同一天上线，一个功能有问题则所有的代码都要回滚</li>\n<li>单系统功能业务模块较多时，A业务的代码开发可能影响B业务，比如一些公共模块的改动</li>\n<li>团队人员管理方面，系统出了一些问题，到底谁来负责处理，谁来监控DB,JVM,QPS,RT等数据</li>\n</ul>\n<hr>\n<p>系统拆分可以解决大部分问题，但怎么去把代码拆出来，还是需要一些方法论支持的。</p>\n<p>比如，<strong>老系统的代码如何处理？新系统如何上线？两者的上下线如何保证现有功能的稳定？代码要怎么拆？如何梳理？<br>会不会漏了某些功能？</strong></p>\n<p>我会结合空想出来的idea和实战中的具体做法去总结</p>\n<hr>\n<h3 id=\"系统-x2F-微服务拆分的原则\"><a href=\"#系统-x2F-微服务拆分的原则\" class=\"headerlink\" title=\"系统&#x2F;微服务拆分的原则\"></a>系统&#x2F;微服务拆分的原则</h3><ul>\n<li>1.单一职责原则<ul>\n<li>按照大类拆分、业务类型拆分、模块拆分</li>\n</ul>\n</li>\n<li>2.粒度适中原则<ul>\n<li>一个接口拆一个系统出来 显然不太适合</li>\n</ul>\n</li>\n<li>3.避免环形依赖和双向依赖<ul>\n<li>理清链路调用关系，强依赖可以使用MQ解耦</li>\n</ul>\n</li>\n<li>4.考虑团队结构<ul>\n<li>我的系统我负责，每个系统分配负责人，该负责人统筹该系统的所有需求、发布上线、问题解决、监控告警等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"梳理拆分范围\"><a href=\"#梳理拆分范围\" class=\"headerlink\" title=\"梳理拆分范围\"></a>梳理拆分范围</h3><h4 id=\"1-流量入口\"><a href=\"#1-流量入口\" class=\"headerlink\" title=\"1.流量入口\"></a>1.流量入口</h4><ul>\n<li>1对外围暴露接口API</li>\n<li>2.对内部暴露的controller</li>\n<li>3.MQ消费  kafak&#x2F;Rabbit&#x2F;Rocket</li>\n<li>4.job定时任务 xxl-job&#x2F;spring&#x2F;java定时任务</li>\n<li>5.Apollo&#x2F;ZK 配置变更监听</li>\n</ul>\n<h4 id=\"2-流量出口\"><a href=\"#2-流量出口\" class=\"headerlink\" title=\"2.流量出口\"></a>2.流量出口</h4><ul>\n<li>1.API接口调用 ES查询 redis调用</li>\n<li>2.MQ推送  kafak&#x2F;Rabbit&#x2F;Rocket</li>\n<li>3.ES推送 </li>\n<li>4.缓存</li>\n<li>5.数据库MySQL</li>\n</ul>\n<h4 id=\"3-架构部分\"><a href=\"#3-架构部分\" class=\"headerlink\" title=\"3.架构部分\"></a>3.架构部分</h4><ul>\n<li>1.filter过滤器 登录拦截等</li>\n<li>2.mybatis拦截器</li>\n<li>3.AOP切面</li>\n<li>4.线程池</li>\n<li>5.全链路</li>\n</ul>\n<h4 id=\"4-配置部分\"><a href=\"#4-配置部分\" class=\"headerlink\" title=\"4.配置部分\"></a>4.配置部分</h4><ul>\n<li>1.YML配置<ul>\n<li>a. MQ kafaka Redis Apollo</li>\n<li>b. consul 日志中心 Druid连接池</li>\n<li>c. 框架配置 全链路</li>\n</ul>\n</li>\n<li>2.pass机器配置</li>\n<li>3.CICD配置</li>\n<li>4.Apollo配置</li>\n<li>5.缓存配置</li>\n</ul>\n<h2 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h2><h3 id=\"代码剥离-x2F-迁移\"><a href=\"#代码剥离-x2F-迁移\" class=\"headerlink\" title=\"代码剥离&#x2F;迁移\"></a>代码剥离&#x2F;迁移</h3><p><strong>代码迁移有两种方案</strong>：</p>\n<ul>\n<li>fork原来的代码库，在fork库上删除不相关代码</li>\n<li>新建代码库，copy&#x2F;剪切相关代码到新库中</li>\n</ul>\n<p>我选择了第二种方案，我是这么考虑的</p>\n<p>第一种方案对于环境来说比较稳妥，配置什么的都是一样的，但是我认为迁出的代码只是一小部分，<br>而删除的代码应该占 <mark class=\"hl-label default\">50%-80%</mark> ，去判断某一块代码是否应该删除，会占用更多的精力和时间，<br>而分离要迁出的代码只关心哪些要剥离就好.</p>\n<p>主要是我怕删除的时候会一不小心就删掉了一些细节，而剥离剪切更好掌控力度</p>\n<div class=\"note warning flat\"><p>但是仔细想想，又好像没什么区别。毕竟一块代码你总要判断塔到底是否要剥离<br>除非你知道要剥离哪些功能，而且涉及的包或者接口你都比较清楚<br>事实上，你不可能全面了解一个很复杂的系统的涉及的所有业务的</p>\n</div>\n\n\n<p>刚开始操作的时候，我很天真的按照接口粒度来拆分，一个接口拆了我大概2个小时。<br>从API到controller到Service到实现类，此时service还没完全迁移完，我就放弃了 <mark class=\"hl-label default\">由于剥离的时候还想着优化一下代码占用了一点时间</mark> </p>\n<p>由于按照接口来，剪切的时候会有很多依赖类不存在，需要一个个的把依赖的类剪切过来，而且我改了包目录，<br>还要一个一个的import，这部分占用了大量的时间，效率是在是太慢了</p>\n<hr>\n<p>所以我还是选择了第一种方案，先整理下所有的接口到Excel表里，记录哪些API对应哪些业务，<br>整理代码功能点，然后记录是否要剥离。最后照着表格删除不用的即可</p>\n<p>等代码整体都稳定了，然后再去定义包结构，优化模块，此时类的依赖就会随着包结构的改变而改变，不用再操心了</p>\n<p>切忌迁移之前就定义好包目录，这样包的依赖处理会很头疼</p>\n"},{"title":"Nginx文档","_content":"### M1 安装NG\n- 首先MAC安装了brew\n- brew install nginx 安装NG\n- brew services start nginx 启动NG 访问 localhost:8080\n- NG配置 /opt/homebrew/etc/nginx/nginx.conf\n- 默认安装目录 /opt/homebrew/opt/nginx/\n\n安装成功的提示：\n```text\n==> nginx\nDocroot is: /opt/homebrew/var/www\nThe default port has been set in /opt/homebrew/etc/nginx/nginx.conf to 8080 so that\nnginx can run without sudo.\nnginx will load all files in /opt/homebrew/etc/nginx/servers/.\nTo start nginx:\nbrew services start nginx\nOr, if you don't want/need a background service you can just run:\n/opt/homebrew/opt/nginx/bin/nginx -g 'daemon off;'\n```\n\n### 基本命令操作\n- 启动 ./nginx\n- 关闭 ./nginx -s stop\n- 重启 ./nginx -s reload\n- nginx -V（大写） 可查看日志文件目录 配置文件目录等\n```text\nconfigure arguments: --prefix=/opt/homebrew/Cellar/nginx/1.21.3 --sbin-path=/opt/homebrew/Cellar/nginx/1.21.3/bin/nginx \n--with-cc-opt='-I/opt/homebrew/opt/pcre/include -I/opt/homebrew/opt/openssl@1.1/include' \n--with-ld-opt='-L/opt/homebrew/opt/pcre/lib -L/opt/homebrew/opt/openssl@1.1/lib' \n--conf-path=/opt/homebrew/etc/nginx/nginx.conf --pid-path=/opt/homebrew/var/run/nginx.pid \n--lock-path=/opt/homebrew/var/run/nginx.lock --http-client-body-temp-path=/opt/homebrew/var/run/nginx/client_body_temp \n--http-proxy-temp-path=/opt/homebrew/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/opt/homebrew/var/run/nginx/fastcgi_temp \n--http-uwsgi-temp-path=/opt/homebrew/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/opt/homebrew/var/run/nginx/scgi_temp \n--http-log-path=/opt/homebrew/var/log/nginx/access.log --error-log-path=/opt/homebrew/var/log/nginx/error.log --with-compat \n--with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module \n--with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module \n--with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module \n--with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream \n--with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module\n```\n\n","source":"_posts/nginx安装使用.md","raw":"---\ntitle: Nginx文档\ncategories: 教程\ntags:\n- ng\n---\n### M1 安装NG\n- 首先MAC安装了brew\n- brew install nginx 安装NG\n- brew services start nginx 启动NG 访问 localhost:8080\n- NG配置 /opt/homebrew/etc/nginx/nginx.conf\n- 默认安装目录 /opt/homebrew/opt/nginx/\n\n安装成功的提示：\n```text\n==> nginx\nDocroot is: /opt/homebrew/var/www\nThe default port has been set in /opt/homebrew/etc/nginx/nginx.conf to 8080 so that\nnginx can run without sudo.\nnginx will load all files in /opt/homebrew/etc/nginx/servers/.\nTo start nginx:\nbrew services start nginx\nOr, if you don't want/need a background service you can just run:\n/opt/homebrew/opt/nginx/bin/nginx -g 'daemon off;'\n```\n\n### 基本命令操作\n- 启动 ./nginx\n- 关闭 ./nginx -s stop\n- 重启 ./nginx -s reload\n- nginx -V（大写） 可查看日志文件目录 配置文件目录等\n```text\nconfigure arguments: --prefix=/opt/homebrew/Cellar/nginx/1.21.3 --sbin-path=/opt/homebrew/Cellar/nginx/1.21.3/bin/nginx \n--with-cc-opt='-I/opt/homebrew/opt/pcre/include -I/opt/homebrew/opt/openssl@1.1/include' \n--with-ld-opt='-L/opt/homebrew/opt/pcre/lib -L/opt/homebrew/opt/openssl@1.1/lib' \n--conf-path=/opt/homebrew/etc/nginx/nginx.conf --pid-path=/opt/homebrew/var/run/nginx.pid \n--lock-path=/opt/homebrew/var/run/nginx.lock --http-client-body-temp-path=/opt/homebrew/var/run/nginx/client_body_temp \n--http-proxy-temp-path=/opt/homebrew/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/opt/homebrew/var/run/nginx/fastcgi_temp \n--http-uwsgi-temp-path=/opt/homebrew/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/opt/homebrew/var/run/nginx/scgi_temp \n--http-log-path=/opt/homebrew/var/log/nginx/access.log --error-log-path=/opt/homebrew/var/log/nginx/error.log --with-compat \n--with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module \n--with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module \n--with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module \n--with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream \n--with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module\n```\n\n","slug":"nginx安装使用","published":1,"date":"2022-07-27T02:37:50.964Z","updated":"2022-07-27T02:43:00.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl630wv2u0000tw10br3sfkqi","content":"<h3 id=\"M1-安装NG\"><a href=\"#M1-安装NG\" class=\"headerlink\" title=\"M1 安装NG\"></a>M1 安装NG</h3><ul>\n<li>首先MAC安装了brew</li>\n<li>brew install nginx 安装NG</li>\n<li>brew services start nginx 启动NG 访问 localhost:8080</li>\n<li>NG配置 &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>默认安装目录 &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;nginx&#x2F;</li>\n</ul>\n<p>安装成功的提示：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==&gt; nginx</span><br><span class=\"line\">Docroot is: /opt/homebrew/var/www</span><br><span class=\"line\">The default port has been set in /opt/homebrew/etc/nginx/nginx.conf to 8080 so that</span><br><span class=\"line\">nginx can run without sudo.</span><br><span class=\"line\">nginx will load all files in /opt/homebrew/etc/nginx/servers/.</span><br><span class=\"line\">To start nginx:</span><br><span class=\"line\">brew services start nginx</span><br><span class=\"line\">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class=\"line\">/opt/homebrew/opt/nginx/bin/nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本命令操作\"><a href=\"#基本命令操作\" class=\"headerlink\" title=\"基本命令操作\"></a>基本命令操作</h3><ul>\n<li>启动 .&#x2F;nginx</li>\n<li>关闭 .&#x2F;nginx -s stop</li>\n<li>重启 .&#x2F;nginx -s reload</li>\n<li>nginx -V（大写） 可查看日志文件目录 配置文件目录等<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure arguments: --prefix=/opt/homebrew/Cellar/nginx/1.21.3 --sbin-path=/opt/homebrew/Cellar/nginx/1.21.3/bin/nginx </span><br><span class=\"line\">--with-cc-opt=&#x27;-I/opt/homebrew/opt/pcre/include -I/opt/homebrew/opt/openssl@1.1/include&#x27; </span><br><span class=\"line\">--with-ld-opt=&#x27;-L/opt/homebrew/opt/pcre/lib -L/opt/homebrew/opt/openssl@1.1/lib&#x27; </span><br><span class=\"line\">--conf-path=/opt/homebrew/etc/nginx/nginx.conf --pid-path=/opt/homebrew/var/run/nginx.pid </span><br><span class=\"line\">--lock-path=/opt/homebrew/var/run/nginx.lock --http-client-body-temp-path=/opt/homebrew/var/run/nginx/client_body_temp </span><br><span class=\"line\">--http-proxy-temp-path=/opt/homebrew/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/opt/homebrew/var/run/nginx/fastcgi_temp </span><br><span class=\"line\">--http-uwsgi-temp-path=/opt/homebrew/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/opt/homebrew/var/run/nginx/scgi_temp </span><br><span class=\"line\">--http-log-path=/opt/homebrew/var/log/nginx/access.log --error-log-path=/opt/homebrew/var/log/nginx/error.log --with-compat </span><br><span class=\"line\">--with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module </span><br><span class=\"line\">--with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module </span><br><span class=\"line\">--with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">--with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream </span><br><span class=\"line\">--with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h3 id=\"M1-安装NG\"><a href=\"#M1-安装NG\" class=\"headerlink\" title=\"M1 安装NG\"></a>M1 安装NG</h3><ul>\n<li>首先MAC安装了brew</li>\n<li>brew install nginx 安装NG</li>\n<li>brew services start nginx 启动NG 访问 localhost:8080</li>\n<li>NG配置 &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>默认安装目录 &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;nginx&#x2F;</li>\n</ul>\n<p>安装成功的提示：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==&gt; nginx</span><br><span class=\"line\">Docroot is: /opt/homebrew/var/www</span><br><span class=\"line\">The default port has been set in /opt/homebrew/etc/nginx/nginx.conf to 8080 so that</span><br><span class=\"line\">nginx can run without sudo.</span><br><span class=\"line\">nginx will load all files in /opt/homebrew/etc/nginx/servers/.</span><br><span class=\"line\">To start nginx:</span><br><span class=\"line\">brew services start nginx</span><br><span class=\"line\">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class=\"line\">/opt/homebrew/opt/nginx/bin/nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本命令操作\"><a href=\"#基本命令操作\" class=\"headerlink\" title=\"基本命令操作\"></a>基本命令操作</h3><ul>\n<li>启动 .&#x2F;nginx</li>\n<li>关闭 .&#x2F;nginx -s stop</li>\n<li>重启 .&#x2F;nginx -s reload</li>\n<li>nginx -V（大写） 可查看日志文件目录 配置文件目录等<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure arguments: --prefix=/opt/homebrew/Cellar/nginx/1.21.3 --sbin-path=/opt/homebrew/Cellar/nginx/1.21.3/bin/nginx </span><br><span class=\"line\">--with-cc-opt=&#x27;-I/opt/homebrew/opt/pcre/include -I/opt/homebrew/opt/openssl@1.1/include&#x27; </span><br><span class=\"line\">--with-ld-opt=&#x27;-L/opt/homebrew/opt/pcre/lib -L/opt/homebrew/opt/openssl@1.1/lib&#x27; </span><br><span class=\"line\">--conf-path=/opt/homebrew/etc/nginx/nginx.conf --pid-path=/opt/homebrew/var/run/nginx.pid </span><br><span class=\"line\">--lock-path=/opt/homebrew/var/run/nginx.lock --http-client-body-temp-path=/opt/homebrew/var/run/nginx/client_body_temp </span><br><span class=\"line\">--http-proxy-temp-path=/opt/homebrew/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/opt/homebrew/var/run/nginx/fastcgi_temp </span><br><span class=\"line\">--http-uwsgi-temp-path=/opt/homebrew/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/opt/homebrew/var/run/nginx/scgi_temp </span><br><span class=\"line\">--http-log-path=/opt/homebrew/var/log/nginx/access.log --error-log-path=/opt/homebrew/var/log/nginx/error.log --with-compat </span><br><span class=\"line\">--with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module </span><br><span class=\"line\">--with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module </span><br><span class=\"line\">--with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">--with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream </span><br><span class=\"line\">--with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"","_content":"","source":"_drafts/模板.md","raw":"---\ntitle: \ncategories: \ntags:\n\n---\n","slug":"模板","published":0,"date":"2022-07-19T11:56:32.125Z","updated":"2022-07-27T02:37:50.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl630wv2x0001tw10es7hf6d8","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":""},{"title":"架构设计","keywords":"系统设计 架构设计","date":"2022-07-18T11:27:05.287Z","_content":"\n### 架构分类\n\n- 业务架构——业务要做的事情的集合\n- 产品架构——功能模块的归并分类\n- 数据架构——如何存储数据、使用数据，系统需要什么数据\n- 应用架构——应用之间的关联、耦合、复用、集成\n- 技术架构——技术分层、技术框架选择、开发语言、使用的中间件、技术选型\n\n\n\n\n### 1.概念\n#### 1.1系统与子系统\n\n#### 1.2模块与组件\n模块强调职责分离，是逻辑上的系统拆分\n组件注重单元复用，是物理上的系统拆分\n\n#### 1.3框架与架构\n框架关注规范\n架构关注结构\n\n### 四色原型法进行业务模型的抽象\n- 事物在某个时刻或某一段时间内发生的。使用红色表示，在 定义过程中，一种方法是通过名词+动词进行定义\n- 参与扮演不同角色的人或事物，使用绿色表示\n- 角色是一种参与方式，它由人或组织机构、地点或物品来承担。使用黄色表示\n- 资料类型的资源，它可以被其它原型反复使用，并为其它原型提供行为。使用蓝色表示\n\n\n![](images/jiagousheji/img.png)\n\n![](images/jiagousheji/img_1.png)\n\n![](images/jiagousheji/img_2.png)\n\n\n### 3产品架构\n#### 水平划分\n按照同一产品范围的模块放在同一层级的原则\n#### 垂直划分\n当应用内存在几个相对独立的模块，每个模块的业务逻辑差别比较大，且内部的组成较为复杂和庞大时，还需要进一步对应用内进行子系统的切分。这里的切分原则是，对应用内按业务进行切分，保证子应用是相互独立。\n\n### 4应用架构\n#### 4.1 单体式应用\n单体式应用架构是比较传统的分为 4 层：数据层（Data Layer）、应用逻辑层（Business Layer）、表现层（Presentation Layer）和基础通用层（Common Layer）\n\n![](images/jiagousheji/img_3.png)\n\n\n **通用基础层**\n通用基础层是为系统提供通用能力的中间件，比如流程引擎、消息中间件、缓存、搜索引擎等等。这些中间件和业务是无相关性的，提供的是通用的基础技术能力\n\n\n#### 4.2分布式应用\n\n单体式应用在分布式环境下的应用\n\n\n{% label 最终一种好的应用架构图，应该具备以下特点 %}\n\n- 清晰的应用边界。\n- 应用之间的调用关系明确。\n- 有入必有出，有输入系统、必有输出系统。\n- 清晰的呈现应用的全局关系。\n\n\n\n### 技术架构\n\nhttps://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG\n\n#### 5.1战略设计\n- 合适原则——不要一味追求新技术、合适的才是最好的\n- 简单原则——大道至简\n  - 结构复杂性——指组件之间的耦合关系\n    - 第一，组成的组件数量很多；\n    - 第二，这些组件之间的关系很复杂\n  - 逻辑复杂性——只单个组件内部的复杂性\n- 演化原则\n> 如果没有意识到“软件架构需要根据业务发展不断变化”这个本质，在做架构设计的时候很容易陷入一个误区：试图一步到位设计一个软件架构，期望不管业务如何变化，架构都稳如磐石。如果是按照这样的目标是设计，一开始上来就做出一套看似是终极的方案，投入庞大的资源做各种预测、分析。结果是投入巨大的资源、开发周期漫长，最终跌跌撞撞落地的系统，却发现已经无法很好的满足现有的业务。\n\n\n#### 5.2战术设计\n**5.2.1 高并发原则**\n设计高并发的系统，需要考虑以下几个方面的设计：**无状态、拆分、服务化、消息队列、数据异构、缓存**\n- 无状态应用，便于水平扩展\n\n{% label 拆分 %}\n- 系统维度——按照功能拆分，比如订单、购物车、支付\n- 功能维度——单系统再拆分，订单中的签收、发货、取消等\n- 读写维度——读多考虑多级缓存、写多考虑分库分表\n- AOP维度——按照AOP拆分\n- 模块维度——web service dao\n\n{% label 服务化 %}\n- 服务的发现、注册、超时、熔断、黑白名单、路由、限流、隔离、分组\n- 服务治理\n\n{% label 消息队列 %}\n- 异步、消峰、解耦\n- 缓冲，保证最终一致性\n\n{% label 数据异构（不太理解） %}\n- 数据异构：通过消息队列机制接受数据变更，原子化存储。\n- 数据闭环：屏蔽多重数据来源，将数据异构存储，形成闭环。\n\n{% label 缓存 %}\n- 用户层：各种DNS缓存、C端缓存\n- DNS 缓存、浏览器 DNS 缓存、操作系统 DNS 缓存、本地 DNS 服务商缓存、DNS 服务器缓存、客户端缓存、浏览器缓存、APP 客户端缓存。\n- 代理层：CDN 缓存\n  - 一般基于 ATS、Varnish、Nginx、Squid 等构建，边缘节点 -二级节点 -中心节点 -源\n- 接入层：Nginx 的 Proxy_cache 代理缓存，或者 Nginx+Lua+Redis 做业务数据缓存。\n- 应用层：页面静态化、业务数据缓存（Redis/Memcache/本地文件等）、消息队列\n- 数据层：NoSQL（Redis、Memcache、SSDB 等）\n\n#### 5.2.2 高可用原则、容灾原则\n{% label 降级 %}\n降级开关集中化管理：将开关配置信息推送到各个应用。\n可降级的多级读服务：如服务调用降级为只读本地缓存。\n开关前置化：如 Nginx+Lua 配置降级策略，引流流量；可基于此做灰度策略。\n业务降级：高并发下，保证核心功能，次要功能可由同步改为异步策略或屏蔽功能。\n\n\n{% label 限流 %}\n目的：防止恶意请求攻击或超过系统峰值\n恶意请求流量只访问到 Cache\n穿透后端应用的流量 Nginx 的 limit 处理\n恶意 Ip 使用 Nginx Deny 策略或者 iptables 拒绝\n\n\n{% label 回滚 %}\n发布版本失败时，可随时快速回退到上一个稳定版本。\n\n\n{% label 备份 %}\n备份容灾\n多机房部署\n\n##### 5.2.3 业务设计原则\n防重\n幂等\n状态机\n后台系统审批\n后台系统权限控制\n后台系统操作可反馈\n\n#### 5.3技术架构图\n5.3.1逻辑架构图\n是描绘如何通过技术组件来实现系统产品功能的图\n可分为局部 和整体\n\n\n\n![](images/jiagousheji/img_4.png)\n\n\n物理架构图\n是描绘如何通过物理部署的来实现系统运行的图\n\n物理架构偏重于网络设计、集群设计、中间件设计、数据存储设计等基础软硬件的设计架构\n\n\n![](images/jiagousheji/img_5.png)\n","source":"_posts/架构设计.md","raw":"---\ntitle: 架构设计\nkeywords: 系统设计 架构设计\ndate:\n\ncategories: 架构\ntags:\n- 系统设计\n\n---\n\n### 架构分类\n\n- 业务架构——业务要做的事情的集合\n- 产品架构——功能模块的归并分类\n- 数据架构——如何存储数据、使用数据，系统需要什么数据\n- 应用架构——应用之间的关联、耦合、复用、集成\n- 技术架构——技术分层、技术框架选择、开发语言、使用的中间件、技术选型\n\n\n\n\n### 1.概念\n#### 1.1系统与子系统\n\n#### 1.2模块与组件\n模块强调职责分离，是逻辑上的系统拆分\n组件注重单元复用，是物理上的系统拆分\n\n#### 1.3框架与架构\n框架关注规范\n架构关注结构\n\n### 四色原型法进行业务模型的抽象\n- 事物在某个时刻或某一段时间内发生的。使用红色表示，在 定义过程中，一种方法是通过名词+动词进行定义\n- 参与扮演不同角色的人或事物，使用绿色表示\n- 角色是一种参与方式，它由人或组织机构、地点或物品来承担。使用黄色表示\n- 资料类型的资源，它可以被其它原型反复使用，并为其它原型提供行为。使用蓝色表示\n\n\n![](images/jiagousheji/img.png)\n\n![](images/jiagousheji/img_1.png)\n\n![](images/jiagousheji/img_2.png)\n\n\n### 3产品架构\n#### 水平划分\n按照同一产品范围的模块放在同一层级的原则\n#### 垂直划分\n当应用内存在几个相对独立的模块，每个模块的业务逻辑差别比较大，且内部的组成较为复杂和庞大时，还需要进一步对应用内进行子系统的切分。这里的切分原则是，对应用内按业务进行切分，保证子应用是相互独立。\n\n### 4应用架构\n#### 4.1 单体式应用\n单体式应用架构是比较传统的分为 4 层：数据层（Data Layer）、应用逻辑层（Business Layer）、表现层（Presentation Layer）和基础通用层（Common Layer）\n\n![](images/jiagousheji/img_3.png)\n\n\n **通用基础层**\n通用基础层是为系统提供通用能力的中间件，比如流程引擎、消息中间件、缓存、搜索引擎等等。这些中间件和业务是无相关性的，提供的是通用的基础技术能力\n\n\n#### 4.2分布式应用\n\n单体式应用在分布式环境下的应用\n\n\n{% label 最终一种好的应用架构图，应该具备以下特点 %}\n\n- 清晰的应用边界。\n- 应用之间的调用关系明确。\n- 有入必有出，有输入系统、必有输出系统。\n- 清晰的呈现应用的全局关系。\n\n\n\n### 技术架构\n\nhttps://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG\n\n#### 5.1战略设计\n- 合适原则——不要一味追求新技术、合适的才是最好的\n- 简单原则——大道至简\n  - 结构复杂性——指组件之间的耦合关系\n    - 第一，组成的组件数量很多；\n    - 第二，这些组件之间的关系很复杂\n  - 逻辑复杂性——只单个组件内部的复杂性\n- 演化原则\n> 如果没有意识到“软件架构需要根据业务发展不断变化”这个本质，在做架构设计的时候很容易陷入一个误区：试图一步到位设计一个软件架构，期望不管业务如何变化，架构都稳如磐石。如果是按照这样的目标是设计，一开始上来就做出一套看似是终极的方案，投入庞大的资源做各种预测、分析。结果是投入巨大的资源、开发周期漫长，最终跌跌撞撞落地的系统，却发现已经无法很好的满足现有的业务。\n\n\n#### 5.2战术设计\n**5.2.1 高并发原则**\n设计高并发的系统，需要考虑以下几个方面的设计：**无状态、拆分、服务化、消息队列、数据异构、缓存**\n- 无状态应用，便于水平扩展\n\n{% label 拆分 %}\n- 系统维度——按照功能拆分，比如订单、购物车、支付\n- 功能维度——单系统再拆分，订单中的签收、发货、取消等\n- 读写维度——读多考虑多级缓存、写多考虑分库分表\n- AOP维度——按照AOP拆分\n- 模块维度——web service dao\n\n{% label 服务化 %}\n- 服务的发现、注册、超时、熔断、黑白名单、路由、限流、隔离、分组\n- 服务治理\n\n{% label 消息队列 %}\n- 异步、消峰、解耦\n- 缓冲，保证最终一致性\n\n{% label 数据异构（不太理解） %}\n- 数据异构：通过消息队列机制接受数据变更，原子化存储。\n- 数据闭环：屏蔽多重数据来源，将数据异构存储，形成闭环。\n\n{% label 缓存 %}\n- 用户层：各种DNS缓存、C端缓存\n- DNS 缓存、浏览器 DNS 缓存、操作系统 DNS 缓存、本地 DNS 服务商缓存、DNS 服务器缓存、客户端缓存、浏览器缓存、APP 客户端缓存。\n- 代理层：CDN 缓存\n  - 一般基于 ATS、Varnish、Nginx、Squid 等构建，边缘节点 -二级节点 -中心节点 -源\n- 接入层：Nginx 的 Proxy_cache 代理缓存，或者 Nginx+Lua+Redis 做业务数据缓存。\n- 应用层：页面静态化、业务数据缓存（Redis/Memcache/本地文件等）、消息队列\n- 数据层：NoSQL（Redis、Memcache、SSDB 等）\n\n#### 5.2.2 高可用原则、容灾原则\n{% label 降级 %}\n降级开关集中化管理：将开关配置信息推送到各个应用。\n可降级的多级读服务：如服务调用降级为只读本地缓存。\n开关前置化：如 Nginx+Lua 配置降级策略，引流流量；可基于此做灰度策略。\n业务降级：高并发下，保证核心功能，次要功能可由同步改为异步策略或屏蔽功能。\n\n\n{% label 限流 %}\n目的：防止恶意请求攻击或超过系统峰值\n恶意请求流量只访问到 Cache\n穿透后端应用的流量 Nginx 的 limit 处理\n恶意 Ip 使用 Nginx Deny 策略或者 iptables 拒绝\n\n\n{% label 回滚 %}\n发布版本失败时，可随时快速回退到上一个稳定版本。\n\n\n{% label 备份 %}\n备份容灾\n多机房部署\n\n##### 5.2.3 业务设计原则\n防重\n幂等\n状态机\n后台系统审批\n后台系统权限控制\n后台系统操作可反馈\n\n#### 5.3技术架构图\n5.3.1逻辑架构图\n是描绘如何通过技术组件来实现系统产品功能的图\n可分为局部 和整体\n\n\n\n![](images/jiagousheji/img_4.png)\n\n\n物理架构图\n是描绘如何通过物理部署的来实现系统运行的图\n\n物理架构偏重于网络设计、集群设计、中间件设计、数据存储设计等基础软硬件的设计架构\n\n\n![](images/jiagousheji/img_5.png)\n","slug":"架构设计","published":1,"updated":"2022-07-27T03:11:11.176Z","_id":"cl630wv300005tw10f49g5k9y","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"架构分类\"><a href=\"#架构分类\" class=\"headerlink\" title=\"架构分类\"></a>架构分类</h3><ul>\n<li>业务架构——业务要做的事情的集合</li>\n<li>产品架构——功能模块的归并分类</li>\n<li>数据架构——如何存储数据、使用数据，系统需要什么数据</li>\n<li>应用架构——应用之间的关联、耦合、复用、集成</li>\n<li>技术架构——技术分层、技术框架选择、开发语言、使用的中间件、技术选型</li>\n</ul>\n<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><h4 id=\"1-1系统与子系统\"><a href=\"#1-1系统与子系统\" class=\"headerlink\" title=\"1.1系统与子系统\"></a>1.1系统与子系统</h4><h4 id=\"1-2模块与组件\"><a href=\"#1-2模块与组件\" class=\"headerlink\" title=\"1.2模块与组件\"></a>1.2模块与组件</h4><p>模块强调职责分离，是逻辑上的系统拆分<br>组件注重单元复用，是物理上的系统拆分</p>\n<h4 id=\"1-3框架与架构\"><a href=\"#1-3框架与架构\" class=\"headerlink\" title=\"1.3框架与架构\"></a>1.3框架与架构</h4><p>框架关注规范<br>架构关注结构</p>\n<h3 id=\"四色原型法进行业务模型的抽象\"><a href=\"#四色原型法进行业务模型的抽象\" class=\"headerlink\" title=\"四色原型法进行业务模型的抽象\"></a>四色原型法进行业务模型的抽象</h3><ul>\n<li>事物在某个时刻或某一段时间内发生的。使用红色表示，在 定义过程中，一种方法是通过名词+动词进行定义</li>\n<li>参与扮演不同角色的人或事物，使用绿色表示</li>\n<li>角色是一种参与方式，它由人或组织机构、地点或物品来承担。使用黄色表示</li>\n<li>资料类型的资源，它可以被其它原型反复使用，并为其它原型提供行为。使用蓝色表示</li>\n</ul>\n<p><img src=\"/images/jiagousheji/img.png\"></p>\n<p><img src=\"/images/jiagousheji/img_1.png\"></p>\n<p><img src=\"/images/jiagousheji/img_2.png\"></p>\n<h3 id=\"3产品架构\"><a href=\"#3产品架构\" class=\"headerlink\" title=\"3产品架构\"></a>3产品架构</h3><h4 id=\"水平划分\"><a href=\"#水平划分\" class=\"headerlink\" title=\"水平划分\"></a>水平划分</h4><p>按照同一产品范围的模块放在同一层级的原则</p>\n<h4 id=\"垂直划分\"><a href=\"#垂直划分\" class=\"headerlink\" title=\"垂直划分\"></a>垂直划分</h4><p>当应用内存在几个相对独立的模块，每个模块的业务逻辑差别比较大，且内部的组成较为复杂和庞大时，还需要进一步对应用内进行子系统的切分。这里的切分原则是，对应用内按业务进行切分，保证子应用是相互独立。</p>\n<h3 id=\"4应用架构\"><a href=\"#4应用架构\" class=\"headerlink\" title=\"4应用架构\"></a>4应用架构</h3><h4 id=\"4-1-单体式应用\"><a href=\"#4-1-单体式应用\" class=\"headerlink\" title=\"4.1 单体式应用\"></a>4.1 单体式应用</h4><p>单体式应用架构是比较传统的分为 4 层：数据层（Data Layer）、应用逻辑层（Business Layer）、表现层（Presentation Layer）和基础通用层（Common Layer）</p>\n<p><img src=\"/images/jiagousheji/img_3.png\"></p>\n<p> <strong>通用基础层</strong><br>通用基础层是为系统提供通用能力的中间件，比如流程引擎、消息中间件、缓存、搜索引擎等等。这些中间件和业务是无相关性的，提供的是通用的基础技术能力</p>\n<h4 id=\"4-2分布式应用\"><a href=\"#4-2分布式应用\" class=\"headerlink\" title=\"4.2分布式应用\"></a>4.2分布式应用</h4><p>单体式应用在分布式环境下的应用</p>\n<mark class=\"hl-label default\">最终一种好的应用架构图，应该具备以下特点</mark> \n\n<ul>\n<li>清晰的应用边界。</li>\n<li>应用之间的调用关系明确。</li>\n<li>有入必有出，有输入系统、必有输出系统。</li>\n<li>清晰的呈现应用的全局关系。</li>\n</ul>\n<h3 id=\"技术架构\"><a href=\"#技术架构\" class=\"headerlink\" title=\"技术架构\"></a>技术架构</h3><p><a href=\"https://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG\">https://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG</a></p>\n<h4 id=\"5-1战略设计\"><a href=\"#5-1战略设计\" class=\"headerlink\" title=\"5.1战略设计\"></a>5.1战略设计</h4><ul>\n<li>合适原则——不要一味追求新技术、合适的才是最好的</li>\n<li>简单原则——大道至简<ul>\n<li>结构复杂性——指组件之间的耦合关系<ul>\n<li>第一，组成的组件数量很多；</li>\n<li>第二，这些组件之间的关系很复杂</li>\n</ul>\n</li>\n<li>逻辑复杂性——只单个组件内部的复杂性</li>\n</ul>\n</li>\n<li>演化原则<blockquote>\n<p>如果没有意识到“软件架构需要根据业务发展不断变化”这个本质，在做架构设计的时候很容易陷入一个误区：试图一步到位设计一个软件架构，期望不管业务如何变化，架构都稳如磐石。如果是按照这样的目标是设计，一开始上来就做出一套看似是终极的方案，投入庞大的资源做各种预测、分析。结果是投入巨大的资源、开发周期漫长，最终跌跌撞撞落地的系统，却发现已经无法很好的满足现有的业务。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"5-2战术设计\"><a href=\"#5-2战术设计\" class=\"headerlink\" title=\"5.2战术设计\"></a>5.2战术设计</h4><p><strong>5.2.1 高并发原则</strong><br>设计高并发的系统，需要考虑以下几个方面的设计：<strong>无状态、拆分、服务化、消息队列、数据异构、缓存</strong></p>\n<ul>\n<li>无状态应用，便于水平扩展</li>\n</ul>\n<mark class=\"hl-label default\">拆分</mark> \n<ul>\n<li>系统维度——按照功能拆分，比如订单、购物车、支付</li>\n<li>功能维度——单系统再拆分，订单中的签收、发货、取消等</li>\n<li>读写维度——读多考虑多级缓存、写多考虑分库分表</li>\n<li>AOP维度——按照AOP拆分</li>\n<li>模块维度——web service dao</li>\n</ul>\n<mark class=\"hl-label default\">服务化</mark> \n<ul>\n<li>服务的发现、注册、超时、熔断、黑白名单、路由、限流、隔离、分组</li>\n<li>服务治理</li>\n</ul>\n<mark class=\"hl-label default\">消息队列</mark> \n<ul>\n<li>异步、消峰、解耦</li>\n<li>缓冲，保证最终一致性</li>\n</ul>\n<mark class=\"hl-label default\">数据异构（不太理解）</mark> \n<ul>\n<li>数据异构：通过消息队列机制接受数据变更，原子化存储。</li>\n<li>数据闭环：屏蔽多重数据来源，将数据异构存储，形成闭环。</li>\n</ul>\n<mark class=\"hl-label default\">缓存</mark> \n<ul>\n<li>用户层：各种DNS缓存、C端缓存</li>\n<li>DNS 缓存、浏览器 DNS 缓存、操作系统 DNS 缓存、本地 DNS 服务商缓存、DNS 服务器缓存、客户端缓存、浏览器缓存、APP 客户端缓存。</li>\n<li>代理层：CDN 缓存<ul>\n<li>一般基于 ATS、Varnish、Nginx、Squid 等构建，边缘节点 -二级节点 -中心节点 -源</li>\n</ul>\n</li>\n<li>接入层：Nginx 的 Proxy_cache 代理缓存，或者 Nginx+Lua+Redis 做业务数据缓存。</li>\n<li>应用层：页面静态化、业务数据缓存（Redis&#x2F;Memcache&#x2F;本地文件等）、消息队列</li>\n<li>数据层：NoSQL（Redis、Memcache、SSDB 等）</li>\n</ul>\n<h4 id=\"5-2-2-高可用原则、容灾原则\"><a href=\"#5-2-2-高可用原则、容灾原则\" class=\"headerlink\" title=\"5.2.2 高可用原则、容灾原则\"></a>5.2.2 高可用原则、容灾原则</h4><mark class=\"hl-label default\">降级</mark> \n<p>降级开关集中化管理：将开关配置信息推送到各个应用。<br>可降级的多级读服务：如服务调用降级为只读本地缓存。<br>开关前置化：如 Nginx+Lua 配置降级策略，引流流量；可基于此做灰度策略。<br>业务降级：高并发下，保证核心功能，次要功能可由同步改为异步策略或屏蔽功能。</p>\n<mark class=\"hl-label default\">限流</mark> \n<p>目的：防止恶意请求攻击或超过系统峰值<br>恶意请求流量只访问到 Cache<br>穿透后端应用的流量 Nginx 的 limit 处理<br>恶意 Ip 使用 Nginx Deny 策略或者 iptables 拒绝</p>\n<mark class=\"hl-label default\">回滚</mark> \n<p>发布版本失败时，可随时快速回退到上一个稳定版本。</p>\n<mark class=\"hl-label default\">备份</mark> \n<p>备份容灾<br>多机房部署</p>\n<h5 id=\"5-2-3-业务设计原则\"><a href=\"#5-2-3-业务设计原则\" class=\"headerlink\" title=\"5.2.3 业务设计原则\"></a>5.2.3 业务设计原则</h5><p>防重<br>幂等<br>状态机<br>后台系统审批<br>后台系统权限控制<br>后台系统操作可反馈</p>\n<h4 id=\"5-3技术架构图\"><a href=\"#5-3技术架构图\" class=\"headerlink\" title=\"5.3技术架构图\"></a>5.3技术架构图</h4><p>5.3.1逻辑架构图<br>是描绘如何通过技术组件来实现系统产品功能的图<br>可分为局部 和整体</p>\n<p><img src=\"/images/jiagousheji/img_4.png\"></p>\n<p>物理架构图<br>是描绘如何通过物理部署的来实现系统运行的图</p>\n<p>物理架构偏重于网络设计、集群设计、中间件设计、数据存储设计等基础软硬件的设计架构</p>\n<p><img src=\"/images/jiagousheji/img_5.png\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"cover":"/images/page/background.webp","excerpt":"","more":"<h3 id=\"架构分类\"><a href=\"#架构分类\" class=\"headerlink\" title=\"架构分类\"></a>架构分类</h3><ul>\n<li>业务架构——业务要做的事情的集合</li>\n<li>产品架构——功能模块的归并分类</li>\n<li>数据架构——如何存储数据、使用数据，系统需要什么数据</li>\n<li>应用架构——应用之间的关联、耦合、复用、集成</li>\n<li>技术架构——技术分层、技术框架选择、开发语言、使用的中间件、技术选型</li>\n</ul>\n<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><h4 id=\"1-1系统与子系统\"><a href=\"#1-1系统与子系统\" class=\"headerlink\" title=\"1.1系统与子系统\"></a>1.1系统与子系统</h4><h4 id=\"1-2模块与组件\"><a href=\"#1-2模块与组件\" class=\"headerlink\" title=\"1.2模块与组件\"></a>1.2模块与组件</h4><p>模块强调职责分离，是逻辑上的系统拆分<br>组件注重单元复用，是物理上的系统拆分</p>\n<h4 id=\"1-3框架与架构\"><a href=\"#1-3框架与架构\" class=\"headerlink\" title=\"1.3框架与架构\"></a>1.3框架与架构</h4><p>框架关注规范<br>架构关注结构</p>\n<h3 id=\"四色原型法进行业务模型的抽象\"><a href=\"#四色原型法进行业务模型的抽象\" class=\"headerlink\" title=\"四色原型法进行业务模型的抽象\"></a>四色原型法进行业务模型的抽象</h3><ul>\n<li>事物在某个时刻或某一段时间内发生的。使用红色表示，在 定义过程中，一种方法是通过名词+动词进行定义</li>\n<li>参与扮演不同角色的人或事物，使用绿色表示</li>\n<li>角色是一种参与方式，它由人或组织机构、地点或物品来承担。使用黄色表示</li>\n<li>资料类型的资源，它可以被其它原型反复使用，并为其它原型提供行为。使用蓝色表示</li>\n</ul>\n<p><img src=\"/images/jiagousheji/img.png\"></p>\n<p><img src=\"/images/jiagousheji/img_1.png\"></p>\n<p><img src=\"/images/jiagousheji/img_2.png\"></p>\n<h3 id=\"3产品架构\"><a href=\"#3产品架构\" class=\"headerlink\" title=\"3产品架构\"></a>3产品架构</h3><h4 id=\"水平划分\"><a href=\"#水平划分\" class=\"headerlink\" title=\"水平划分\"></a>水平划分</h4><p>按照同一产品范围的模块放在同一层级的原则</p>\n<h4 id=\"垂直划分\"><a href=\"#垂直划分\" class=\"headerlink\" title=\"垂直划分\"></a>垂直划分</h4><p>当应用内存在几个相对独立的模块，每个模块的业务逻辑差别比较大，且内部的组成较为复杂和庞大时，还需要进一步对应用内进行子系统的切分。这里的切分原则是，对应用内按业务进行切分，保证子应用是相互独立。</p>\n<h3 id=\"4应用架构\"><a href=\"#4应用架构\" class=\"headerlink\" title=\"4应用架构\"></a>4应用架构</h3><h4 id=\"4-1-单体式应用\"><a href=\"#4-1-单体式应用\" class=\"headerlink\" title=\"4.1 单体式应用\"></a>4.1 单体式应用</h4><p>单体式应用架构是比较传统的分为 4 层：数据层（Data Layer）、应用逻辑层（Business Layer）、表现层（Presentation Layer）和基础通用层（Common Layer）</p>\n<p><img src=\"/images/jiagousheji/img_3.png\"></p>\n<p> <strong>通用基础层</strong><br>通用基础层是为系统提供通用能力的中间件，比如流程引擎、消息中间件、缓存、搜索引擎等等。这些中间件和业务是无相关性的，提供的是通用的基础技术能力</p>\n<h4 id=\"4-2分布式应用\"><a href=\"#4-2分布式应用\" class=\"headerlink\" title=\"4.2分布式应用\"></a>4.2分布式应用</h4><p>单体式应用在分布式环境下的应用</p>\n<mark class=\"hl-label default\">最终一种好的应用架构图，应该具备以下特点</mark> \n\n<ul>\n<li>清晰的应用边界。</li>\n<li>应用之间的调用关系明确。</li>\n<li>有入必有出，有输入系统、必有输出系统。</li>\n<li>清晰的呈现应用的全局关系。</li>\n</ul>\n<h3 id=\"技术架构\"><a href=\"#技术架构\" class=\"headerlink\" title=\"技术架构\"></a>技术架构</h3><p><a href=\"https://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG\">https://www.infoq.cn/article/RQDwWxDcwbxtwU8LBFSG</a></p>\n<h4 id=\"5-1战略设计\"><a href=\"#5-1战略设计\" class=\"headerlink\" title=\"5.1战略设计\"></a>5.1战略设计</h4><ul>\n<li>合适原则——不要一味追求新技术、合适的才是最好的</li>\n<li>简单原则——大道至简<ul>\n<li>结构复杂性——指组件之间的耦合关系<ul>\n<li>第一，组成的组件数量很多；</li>\n<li>第二，这些组件之间的关系很复杂</li>\n</ul>\n</li>\n<li>逻辑复杂性——只单个组件内部的复杂性</li>\n</ul>\n</li>\n<li>演化原则<blockquote>\n<p>如果没有意识到“软件架构需要根据业务发展不断变化”这个本质，在做架构设计的时候很容易陷入一个误区：试图一步到位设计一个软件架构，期望不管业务如何变化，架构都稳如磐石。如果是按照这样的目标是设计，一开始上来就做出一套看似是终极的方案，投入庞大的资源做各种预测、分析。结果是投入巨大的资源、开发周期漫长，最终跌跌撞撞落地的系统，却发现已经无法很好的满足现有的业务。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"5-2战术设计\"><a href=\"#5-2战术设计\" class=\"headerlink\" title=\"5.2战术设计\"></a>5.2战术设计</h4><p><strong>5.2.1 高并发原则</strong><br>设计高并发的系统，需要考虑以下几个方面的设计：<strong>无状态、拆分、服务化、消息队列、数据异构、缓存</strong></p>\n<ul>\n<li>无状态应用，便于水平扩展</li>\n</ul>\n<mark class=\"hl-label default\">拆分</mark> \n<ul>\n<li>系统维度——按照功能拆分，比如订单、购物车、支付</li>\n<li>功能维度——单系统再拆分，订单中的签收、发货、取消等</li>\n<li>读写维度——读多考虑多级缓存、写多考虑分库分表</li>\n<li>AOP维度——按照AOP拆分</li>\n<li>模块维度——web service dao</li>\n</ul>\n<mark class=\"hl-label default\">服务化</mark> \n<ul>\n<li>服务的发现、注册、超时、熔断、黑白名单、路由、限流、隔离、分组</li>\n<li>服务治理</li>\n</ul>\n<mark class=\"hl-label default\">消息队列</mark> \n<ul>\n<li>异步、消峰、解耦</li>\n<li>缓冲，保证最终一致性</li>\n</ul>\n<mark class=\"hl-label default\">数据异构（不太理解）</mark> \n<ul>\n<li>数据异构：通过消息队列机制接受数据变更，原子化存储。</li>\n<li>数据闭环：屏蔽多重数据来源，将数据异构存储，形成闭环。</li>\n</ul>\n<mark class=\"hl-label default\">缓存</mark> \n<ul>\n<li>用户层：各种DNS缓存、C端缓存</li>\n<li>DNS 缓存、浏览器 DNS 缓存、操作系统 DNS 缓存、本地 DNS 服务商缓存、DNS 服务器缓存、客户端缓存、浏览器缓存、APP 客户端缓存。</li>\n<li>代理层：CDN 缓存<ul>\n<li>一般基于 ATS、Varnish、Nginx、Squid 等构建，边缘节点 -二级节点 -中心节点 -源</li>\n</ul>\n</li>\n<li>接入层：Nginx 的 Proxy_cache 代理缓存，或者 Nginx+Lua+Redis 做业务数据缓存。</li>\n<li>应用层：页面静态化、业务数据缓存（Redis&#x2F;Memcache&#x2F;本地文件等）、消息队列</li>\n<li>数据层：NoSQL（Redis、Memcache、SSDB 等）</li>\n</ul>\n<h4 id=\"5-2-2-高可用原则、容灾原则\"><a href=\"#5-2-2-高可用原则、容灾原则\" class=\"headerlink\" title=\"5.2.2 高可用原则、容灾原则\"></a>5.2.2 高可用原则、容灾原则</h4><mark class=\"hl-label default\">降级</mark> \n<p>降级开关集中化管理：将开关配置信息推送到各个应用。<br>可降级的多级读服务：如服务调用降级为只读本地缓存。<br>开关前置化：如 Nginx+Lua 配置降级策略，引流流量；可基于此做灰度策略。<br>业务降级：高并发下，保证核心功能，次要功能可由同步改为异步策略或屏蔽功能。</p>\n<mark class=\"hl-label default\">限流</mark> \n<p>目的：防止恶意请求攻击或超过系统峰值<br>恶意请求流量只访问到 Cache<br>穿透后端应用的流量 Nginx 的 limit 处理<br>恶意 Ip 使用 Nginx Deny 策略或者 iptables 拒绝</p>\n<mark class=\"hl-label default\">回滚</mark> \n<p>发布版本失败时，可随时快速回退到上一个稳定版本。</p>\n<mark class=\"hl-label default\">备份</mark> \n<p>备份容灾<br>多机房部署</p>\n<h5 id=\"5-2-3-业务设计原则\"><a href=\"#5-2-3-业务设计原则\" class=\"headerlink\" title=\"5.2.3 业务设计原则\"></a>5.2.3 业务设计原则</h5><p>防重<br>幂等<br>状态机<br>后台系统审批<br>后台系统权限控制<br>后台系统操作可反馈</p>\n<h4 id=\"5-3技术架构图\"><a href=\"#5-3技术架构图\" class=\"headerlink\" title=\"5.3技术架构图\"></a>5.3技术架构图</h4><p>5.3.1逻辑架构图<br>是描绘如何通过技术组件来实现系统产品功能的图<br>可分为局部 和整体</p>\n<p><img src=\"/images/jiagousheji/img_4.png\"></p>\n<p>物理架构图<br>是描绘如何通过物理部署的来实现系统运行的图</p>\n<p>物理架构偏重于网络设计、集群设计、中间件设计、数据存储设计等基础软硬件的设计架构</p>\n<p><img src=\"/images/jiagousheji/img_5.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5s3wc0u0001ox108cede26y","category_id":"cl5s3wc0w0004ox10as7p1mja","_id":"cl5s3wc0z000cox109jbjf12v"},{"post_id":"cl5s3wc0w0003ox107vl60zji","category_id":"cl5s3wc0y000aox10aftjel5e","_id":"cl5s3wc0z000fox10aksre6ky"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","category_id":"cl5s3wc0z000dox10bc6j4yzb","_id":"cl5s3wc0z000iox103jbb914r"},{"post_id":"cl5s3wc0y0009ox10hkbkcxms","category_id":"cl5s3wc0z000gox1021q27e6d","_id":"cl5s3wc10000mox10ad0e6hix"},{"post_id":"cl5s3wc110012ox10aj2r29vb","category_id":"cl5s3wc110013ox10cretfm59","_id":"cl5s3wc120016ox10994tbs0q"},{"post_id":"cl5s3wc13001cox10g0gnh8ay","category_id":"cl5s3wc13001dox1053y9dube","_id":"cl5s3wc13001gox109khs9172"},{"post_id":"cl630wv2u0000tw10br3sfkqi","category_id":"cl5s3wc110013ox10cretfm59","_id":"cl630wv2z0003tw105e1aglfp"},{"post_id":"cl630wv300005tw10f49g5k9y","category_id":"cl5s3wc13001dox1053y9dube","_id":"cl630wv300007tw1074820l4n"}],"PostTag":[{"post_id":"cl5s3wc0u0001ox108cede26y","tag_id":"cl5s3wc0x0005ox10agyheldt","_id":"cl5s3wc0z000kox108myufcbs"},{"post_id":"cl5s3wc0u0001ox108cede26y","tag_id":"cl5s3wc0y000box10f9180dnn","_id":"cl5s3wc10000lox10afu22nj8"},{"post_id":"cl5s3wc0u0001ox108cede26y","tag_id":"cl5s3wc0z000eox10506n3cuz","_id":"cl5s3wc10000oox10gj573z60"},{"post_id":"cl5s3wc0u0001ox108cede26y","tag_id":"cl5s3wc0z000hox10d2v2hdsk","_id":"cl5s3wc10000pox10gjpibkfd"},{"post_id":"cl5s3wc0w0003ox107vl60zji","tag_id":"cl5s3wc0z000jox100uy895lt","_id":"cl5s3wc10000rox103m0d96t7"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","tag_id":"cl5s3wc10000nox103jv4dbzk","_id":"cl5s3wc10000wox10bjg3ggdj"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","tag_id":"cl5s3wc10000qox1062ancvdd","_id":"cl5s3wc10000xox10a3ja9vms"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","tag_id":"cl5s3wc10000sox10euf3azw4","_id":"cl5s3wc10000yox10fzf87j1w"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","tag_id":"cl5s3wc10000tox10dxof0vq0","_id":"cl5s3wc10000zox10eeeh4n58"},{"post_id":"cl5s3wc0x0007ox103jnvep5o","tag_id":"cl5s3wc10000uox101bsc22wm","_id":"cl5s3wc100010ox104k6i0gjg"},{"post_id":"cl5s3wc0y0009ox10hkbkcxms","tag_id":"cl5s3wc10000vox109e7n2qvy","_id":"cl5s3wc100011ox10ewtre90u"},{"post_id":"cl5s3wc110012ox10aj2r29vb","tag_id":"cl5s3wc120014ox10650bfa8b","_id":"cl5s3wc120018ox1012wxh7ni"},{"post_id":"cl5s3wc110012ox10aj2r29vb","tag_id":"cl5s3wc120015ox10gmvv6tmu","_id":"cl5s3wc120019ox10higu5hee"},{"post_id":"cl5s3wc110012ox10aj2r29vb","tag_id":"cl5s3wc120017ox101xo5hy4l","_id":"cl5s3wc12001aox10hjvu5cy2"},{"post_id":"cl5s3wc13001cox10g0gnh8ay","tag_id":"cl5s3wc13001eox101nkp6k5j","_id":"cl5s3wc13001hox106y8pgqb7"},{"post_id":"cl5s3wc13001cox10g0gnh8ay","tag_id":"cl5s3wc13001fox10hpup4m0n","_id":"cl5s3wc13001iox105174hgq3"},{"post_id":"cl630wv2u0000tw10br3sfkqi","tag_id":"cl630wv2y0002tw1062g8as1g","_id":"cl630wv2z0004tw10e2k29yv9"},{"post_id":"cl630wv300005tw10f49g5k9y","tag_id":"cl630wv300006tw10b8un35b5","_id":"cl630wv310008tw109mnc067d"}],"Tag":[{"name":"datasource","_id":"cl5s3wc0x0005ox10agyheldt"},{"name":"mybatis","_id":"cl5s3wc0y000box10f9180dnn"},{"name":"spring","_id":"cl5s3wc0z000eox10506n3cuz"},{"name":"读写分离","_id":"cl5s3wc0z000hox10d2v2hdsk"},{"name":"数据库","_id":"cl5s3wc0z000jox100uy895lt"},{"name":"拦截器","_id":"cl5s3wc10000nox103jv4dbzk"},{"name":"过滤器","_id":"cl5s3wc10000qox1062ancvdd"},{"name":"servlet","_id":"cl5s3wc10000sox10euf3azw4"},{"name":"springboot","_id":"cl5s3wc10000tox10dxof0vq0"},{"name":"优雅停机","_id":"cl5s3wc10000uox101bsc22wm"},{"name":"天气","_id":"cl5s3wc10000vox109e7n2qvy"},{"name":"API使用","_id":"cl5s3wc120014ox10650bfa8b"},{"name":"语法","_id":"cl5s3wc120015ox10gmvv6tmu"},{"name":"hexo","_id":"cl5s3wc120017ox101xo5hy4l"},{"name":"系统拆分","_id":"cl5s3wc13001eox101nkp6k5j"},{"name":"微服务拆分","_id":"cl5s3wc13001fox10hpup4m0n"},{"name":"ng","_id":"cl630wv2y0002tw1062g8as1g"},{"name":"系统设计","_id":"cl630wv300006tw10b8un35b5"}]}}